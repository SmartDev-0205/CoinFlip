{"id":"fe7e43c004d7e0d22d7f8d9f01088dce","_format":"hh-sol-build-info-1","solcVersion":"0.8.4","solcLongVersion":"0.8.4+commit.c7e474f2","input":{"language":"Solidity","sources":{"contracts/Coinflip.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/* --------- Access Control --------- */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Coinflip is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Bet {\r\n        address playerAddress;\r\n        uint256 betValue;\r\n        uint256 headsTails;\r\n    }\r\n\r\n    mapping(address => uint256) public playerWinnings;\r\n    mapping(address => Bet) public waiting;\r\n\r\n    event logNewProvableQuery(string description);\r\n    event userWithdrawal(address indexed caller, uint256 amount);\r\n    event filpFinshed(uint result);\r\n\r\n    uint256 lastHash;\r\n    uint256 FACTOR =\r\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\r\n\r\n    uint public contractBalance;\r\n\r\n    bool public freeCallback = true;\r\n\r\n    constructor() {}\r\n\r\n    function getResult() private returns (uint) {\r\n        uint256 blockValue = uint256(blockhash(block.number.sub(1)));\r\n\r\n        if (lastHash == blockValue) {\r\n            revert();\r\n        }\r\n\r\n        lastHash = blockValue;\r\n        uint256 coinFlip = blockValue % 2;\r\n        uint side = coinFlip == 1 ? 1 : 0;\r\n        return side;\r\n    }\r\n\r\n    /**\r\n     *@notice This function simulates a coin flip which makes a call to the Provable oracle for\r\n     *        a random number.\r\n     *@dev The function first checks if this is the very first call to the Provable oracle in order\r\n     *     for the user to not pay for the first free call. This also adds user values to two different\r\n     *     mappings: 'waiting' and 'afterWaiting.' Both mappings are necessary in order to bridge the\r\n     *     user's address (which we has access to here with msg.sender) and the user's queryId sent from\r\n     *     Provable after the function call.\r\n     *\r\n     *@param oneZero - The numerical value of heads(0) or tails(1)\r\n     */\r\n\r\n    function flip(uint256 oneZero) public payable {\r\n        require(contractBalance > msg.value, \"We don't have enough funds\");\r\n\r\n        address _player = msg.sender;\r\n        Bet memory postBet;\r\n        postBet.playerAddress = msg.sender;\r\n        postBet.betValue = msg.value;\r\n        postBet.headsTails = oneZero;\r\n\r\n        uint flipResult = getResult();\r\n\r\n        if (flipResult == postBet.headsTails) {\r\n            //winner\r\n            emit filpFinshed(1);\r\n            uint winAmount = SafeMath.sub(SafeMath.mul(postBet.betValue, 2), 0);\r\n            contractBalance = SafeMath.sub(contractBalance, postBet.betValue);\r\n            playerWinnings[_player] = SafeMath.add(\r\n                playerWinnings[_player],\r\n                winAmount\r\n            );\r\n        } else {\r\n            //loser\r\n            emit filpFinshed(0);\r\n            contractBalance = SafeMath.add(\r\n                contractBalance,\r\n                // SafeMath.sub(postBet.betValue, postBet.setRandomPrice)\r\n                SafeMath.sub(postBet.betValue, 0)\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdrawUserWinnings() public {\r\n        require(playerWinnings[msg.sender] > 0, \"No funds to withdraw\");\r\n        uint toTransfer = playerWinnings[msg.sender];\r\n        playerWinnings[msg.sender] = 0;\r\n        payable(msg.sender).transfer(toTransfer);\r\n        emit userWithdrawal(msg.sender, toTransfer);\r\n    }\r\n\r\n    function getWinningsBalance() public view returns (uint) {\r\n        return playerWinnings[msg.sender];\r\n    }\r\n\r\n    /**\r\n     *@notice The following functions are reserved for the owner of the contract.\r\n     */\r\n\r\n    function fundContract() public payable onlyOwner {\r\n        contractBalance = SafeMath.add(contractBalance, msg.value);\r\n    }\r\n\r\n    function fundWinnings() public payable onlyOwner {\r\n        playerWinnings[msg.sender] = SafeMath.add(\r\n            playerWinnings[msg.sender],\r\n            msg.value\r\n        );\r\n    }\r\n\r\n    function withdrawAll() public onlyOwner {\r\n        uint toTransfer = contractBalance;\r\n        contractBalance = 0;\r\n        payable(msg.sender).transfer(toTransfer);\r\n    }\r\n\r\n    function claimETH(uint256 amount) external onlyOwner {\r\n        (bool sent, ) = owner().call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/Coinflip.sol":{"ast":{"absolutePath":"contracts/Coinflip.sol","exportedSymbols":{"Coinflip":[615],"Context":[159],"Ownable":[269],"SafeMath":[138]},"id":616,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"102:575:0","text":" @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":138,"linearizedBaseContracts":[138],"name":"SafeMath","nameLocation":"687:8:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":27,"nodeType":"Block","src":"1001:114:0","statements":[{"assignments":[13],"declarations":[{"constant":false,"id":13,"mutability":"mutable","name":"c","nameLocation":"1020:1:0","nodeType":"VariableDeclaration","scope":27,"src":"1012:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12,"name":"uint256","nodeType":"ElementaryTypeName","src":"1012:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":17,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":16,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":14,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"1024:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":15,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1028:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1024:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1012:17:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":21,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":19,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1048:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":20,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"1053:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1048:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206164646974696f6e206f766572666c6f77","id":22,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1056:29:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""},"value":"SafeMath: addition overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"id":18,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1040:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1040:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"1040:46:0"},{"expression":{"id":25,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1106:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":11,"id":26,"nodeType":"Return","src":"1099:8:0"}]},"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"703:225:0","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":28,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"943:3:0","nodeType":"FunctionDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"a","nameLocation":"955:1:0","nodeType":"VariableDeclaration","scope":28,"src":"947:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"947:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"b","nameLocation":"966:1:0","nodeType":"VariableDeclaration","scope":28,"src":"958:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6,"name":"uint256","nodeType":"ElementaryTypeName","src":"958:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"946:22:0"},"returnParameters":{"id":11,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":28,"src":"992:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9,"name":"uint256","nodeType":"ElementaryTypeName","src":"992:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"991:9:0"},"scope":138,"src":"934:181:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":53,"nodeType":"Block","src":"1457:117:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":39,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"1476:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":40,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1481:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1476:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","id":42,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1484:32:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""},"value":"SafeMath: subtraction overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"id":38,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1468:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1468:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":44,"nodeType":"ExpressionStatement","src":"1468:49:0"},{"assignments":[46],"declarations":[{"constant":false,"id":46,"mutability":"mutable","name":"c","nameLocation":"1536:1:0","nodeType":"VariableDeclaration","scope":53,"src":"1528:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":45,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":50,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":47,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1540:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":48,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"1544:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1540:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1528:17:0"},{"expression":{"id":51,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"1565:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":37,"id":52,"nodeType":"Return","src":"1558:8:0"}]},"documentation":{"id":29,"nodeType":"StructuredDocumentation","src":"1123:261:0","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"1399:3:0","nodeType":"FunctionDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"a","nameLocation":"1411:1:0","nodeType":"VariableDeclaration","scope":54,"src":"1403:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":30,"name":"uint256","nodeType":"ElementaryTypeName","src":"1403:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":33,"mutability":"mutable","name":"b","nameLocation":"1422:1:0","nodeType":"VariableDeclaration","scope":54,"src":"1414:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":32,"name":"uint256","nodeType":"ElementaryTypeName","src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1402:22:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1448:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":35,"name":"uint256","nodeType":"ElementaryTypeName","src":"1448:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1447:9:0"},"scope":138,"src":"1390:184:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":88,"nodeType":"Block","src":"1892:403:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":66,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":64,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"2127:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2132:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2127:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":70,"nodeType":"IfStatement","src":"2123:47:0","trueBody":{"id":69,"nodeType":"Block","src":"2135:35:0","statements":[{"expression":{"hexValue":"30","id":67,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2157:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":63,"id":68,"nodeType":"Return","src":"2150:8:0"}]}},{"assignments":[72],"declarations":[{"constant":false,"id":72,"mutability":"mutable","name":"c","nameLocation":"2190:1:0","nodeType":"VariableDeclaration","scope":88,"src":"2182:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":71,"name":"uint256","nodeType":"ElementaryTypeName","src":"2182:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":76,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":73,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"2194:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":74,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"2198:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2194:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2182:17:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":80,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":78,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"2218:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":79,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":57,"src":"2222:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2218:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":81,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"2227:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2218:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2230:35:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""},"value":"SafeMath: multiplication overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"id":77,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2210:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2210:56:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2210:56:0"},{"expression":{"id":86,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"2286:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":63,"id":87,"nodeType":"Return","src":"2279:8:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1582:237:0","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":89,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"1834:3:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57,"mutability":"mutable","name":"a","nameLocation":"1846:1:0","nodeType":"VariableDeclaration","scope":89,"src":"1838:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":56,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":59,"mutability":"mutable","name":"b","nameLocation":"1857:1:0","nodeType":"VariableDeclaration","scope":89,"src":"1849:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58,"name":"uint256","nodeType":"ElementaryTypeName","src":"1849:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1837:22:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"1883:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":61,"name":"uint256","nodeType":"ElementaryTypeName","src":"1883:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1882:9:0"},"scope":138,"src":"1825:470:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":114,"nodeType":"Block","src":"2830:266:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":100,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2916:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2920:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2916:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206469766973696f6e206279207a65726f","id":103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2923:28:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""},"value":"SafeMath: division by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"id":99,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2908:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2908:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"2908:44:0"},{"assignments":[107],"declarations":[{"constant":false,"id":107,"mutability":"mutable","name":"c","nameLocation":"2971:1:0","nodeType":"VariableDeclaration","scope":114,"src":"2963:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":106,"name":"uint256","nodeType":"ElementaryTypeName","src":"2963:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":111,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":108,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":92,"src":"2975:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":109,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2979:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2975:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2963:17:0"},{"expression":{"id":112,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":107,"src":"3087:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":98,"id":113,"nodeType":"Return","src":"3080:8:0"}]},"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"2303:454:0","text":" @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":115,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"2772:3:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"a","nameLocation":"2784:1:0","nodeType":"VariableDeclaration","scope":115,"src":"2776:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":91,"name":"uint256","nodeType":"ElementaryTypeName","src":"2776:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"b","nameLocation":"2795:1:0","nodeType":"VariableDeclaration","scope":115,"src":"2787:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":93,"name":"uint256","nodeType":"ElementaryTypeName","src":"2787:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2775:22:0"},"returnParameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":115,"src":"2821:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":96,"name":"uint256","nodeType":"ElementaryTypeName","src":"2821:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2820:9:0"},"scope":138,"src":"2763:333:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":136,"nodeType":"Block","src":"3620:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":126,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"3639:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3644:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3639:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536166654d6174683a206d6f64756c6f206279207a65726f","id":129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3647:26:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""},"value":"SafeMath: modulo by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"id":125,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3631:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3631:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":131,"nodeType":"ExpressionStatement","src":"3631:43:0"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":132,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"3692:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":133,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"3696:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3692:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":124,"id":135,"nodeType":"Return","src":"3685:12:0"}]},"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"3104:443:0","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":137,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"3562:3:0","nodeType":"FunctionDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"a","nameLocation":"3574:1:0","nodeType":"VariableDeclaration","scope":137,"src":"3566:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":117,"name":"uint256","nodeType":"ElementaryTypeName","src":"3566:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":120,"mutability":"mutable","name":"b","nameLocation":"3585:1:0","nodeType":"VariableDeclaration","scope":137,"src":"3577:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":119,"name":"uint256","nodeType":"ElementaryTypeName","src":"3577:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3565:22:0"},"returnParameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":137,"src":"3611:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":122,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3610:9:0"},"scope":138,"src":"3553:152:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":616,"src":"679:3029:0","usedErrors":[]},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":159,"linearizedBaseContracts":[159],"name":"Context","nameLocation":"3763:7:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":146,"nodeType":"Block","src":"3988:36:0","statements":[{"expression":{"expression":{"id":143,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4006:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4006:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":142,"id":145,"nodeType":"Return","src":"3999:17:0"}]},"id":147,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"3943:10:0","nodeType":"FunctionDefinition","parameters":{"id":139,"nodeType":"ParameterList","parameters":[],"src":"3953:2:0"},"returnParameters":{"id":142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":147,"src":"3979:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":140,"name":"address","nodeType":"ElementaryTypeName","src":"3979:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3978:9:0"},"scope":159,"src":"3934:90:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":157,"nodeType":"Block","src":"4089:168:0","statements":[{"expression":{"id":152,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4100:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Context_$159","typeString":"contract Context"}},"id":153,"nodeType":"ExpressionStatement","src":"4100:4:0"},{"expression":{"expression":{"id":154,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4241:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"4241:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":151,"id":156,"nodeType":"Return","src":"4234:15:0"}]},"id":158,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"4041:8:0","nodeType":"FunctionDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[],"src":"4049:2:0"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":158,"src":"4075:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":149,"name":"bytes","nodeType":"ElementaryTypeName","src":"4075:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4074:14:0"},"scope":159,"src":"4032:225:0","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":616,"src":"3754:506:0","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":160,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":159,"src":"4284:7:0"},"id":161,"nodeType":"InheritanceSpecifier","src":"4284:7:0"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":269,"linearizedBaseContracts":[269,159],"name":"Ownable","nameLocation":"4273:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":163,"mutability":"mutable","name":"_owner","nameLocation":"4315:6:0","nodeType":"VariableDeclaration","scope":269,"src":"4299:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":162,"name":"address","nodeType":"ElementaryTypeName","src":"4299:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":169,"name":"OwnershipTransferred","nameLocation":"4336:20:0","nodeType":"EventDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":165,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"4383:13:0","nodeType":"VariableDeclaration","scope":169,"src":"4367:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"4367:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":167,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"4423:8:0","nodeType":"VariableDeclaration","scope":169,"src":"4407:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"4407:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4356:82:0"},"src":"4330:109:0"},{"body":{"id":189,"nodeType":"Block","src":"4461:139:0","statements":[{"assignments":[173],"declarations":[{"constant":false,"id":173,"mutability":"mutable","name":"msgSender","nameLocation":"4480:9:0","nodeType":"VariableDeclaration","scope":189,"src":"4472:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":172,"name":"address","nodeType":"ElementaryTypeName","src":"4472:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":176,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":174,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"4492:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4492:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4472:32:0"},{"expression":{"id":179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":177,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"4515:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":178,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"4524:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4515:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":180,"nodeType":"ExpressionStatement","src":"4515:18:0"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4578:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4570:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":182,"name":"address","nodeType":"ElementaryTypeName","src":"4570:7:0","typeDescriptions":{}}},"id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4570:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":186,"name":"msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"4582:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":181,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"4549:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4549:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":188,"nodeType":"EmitStatement","src":"4544:48:0"}]},"id":190,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":170,"nodeType":"ParameterList","parameters":[],"src":"4458:2:0"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[],"src":"4461:0:0"},"scope":269,"src":"4447:153:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":197,"nodeType":"Block","src":"4655:32:0","statements":[{"expression":{"id":195,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"4673:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":194,"id":196,"nodeType":"Return","src":"4666:13:0"}]},"functionSelector":"8da5cb5b","id":198,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"4617:5:0","nodeType":"FunctionDefinition","parameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"4622:2:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":198,"src":"4646:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":192,"name":"address","nodeType":"ElementaryTypeName","src":"4646:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4645:9:0"},"scope":269,"src":"4608:79:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":209,"nodeType":"Block","src":"4716:98:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":201,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"4735:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":202,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"4745:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4745:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4735:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4759:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":200,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4727:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4727:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":207,"nodeType":"ExpressionStatement","src":"4727:67:0"},{"id":208,"nodeType":"PlaceholderStatement","src":"4805:1:0"}]},"id":210,"name":"onlyOwner","nameLocation":"4704:9:0","nodeType":"ModifierDefinition","parameters":{"id":199,"nodeType":"ParameterList","parameters":[],"src":"4713:2:0"},"src":"4695:119:0","virtual":false,"visibility":"internal"},{"body":{"id":230,"nodeType":"Block","src":"4868:94:0","statements":[{"eventCall":{"arguments":[{"id":216,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"4905:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4921:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4913:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":217,"name":"address","nodeType":"ElementaryTypeName","src":"4913:7:0","typeDescriptions":{}}},"id":220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4913:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":215,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"4884:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4884:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":222,"nodeType":"EmitStatement","src":"4879:45:0"},{"expression":{"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":223,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"4935:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4952:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4944:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":224,"name":"address","nodeType":"ElementaryTypeName","src":"4944:7:0","typeDescriptions":{}}},"id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4944:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4935:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":229,"nodeType":"ExpressionStatement","src":"4935:19:0"}]},"functionSelector":"715018a6","id":231,"implemented":true,"kind":"function","modifiers":[{"id":213,"kind":"modifierInvocation","modifierName":{"id":212,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":210,"src":"4858:9:0"},"nodeType":"ModifierInvocation","src":"4858:9:0"}],"name":"renounceOwnership","nameLocation":"4831:17:0","nodeType":"FunctionDefinition","parameters":{"id":211,"nodeType":"ParameterList","parameters":[],"src":"4848:2:0"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[],"src":"4868:0:0"},"scope":269,"src":"4822:140:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":242,"nodeType":"Block","src":"5032:47:0","statements":[{"expression":{"arguments":[{"id":239,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"5062:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":238,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":268,"src":"5043:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5043:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":241,"nodeType":"ExpressionStatement","src":"5043:28:0"}]},"functionSelector":"f2fde38b","id":243,"implemented":true,"kind":"function","modifiers":[{"id":236,"kind":"modifierInvocation","modifierName":{"id":235,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":210,"src":"5022:9:0"},"nodeType":"ModifierInvocation","src":"5022:9:0"}],"name":"transferOwnership","nameLocation":"4979:17:0","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"newOwner","nameLocation":"5005:8:0","nodeType":"VariableDeclaration","scope":243,"src":"4997:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"4997:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4996:18:0"},"returnParameters":{"id":237,"nodeType":"ParameterList","parameters":[],"src":"5032:0:0"},"scope":269,"src":"4970:109:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":267,"nodeType":"Block","src":"5142:211:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":249,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"5175:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5195:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5187:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":250,"name":"address","nodeType":"ElementaryTypeName","src":"5187:7:0","typeDescriptions":{}}},"id":253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5187:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5175:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5212:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":248,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5153:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5153:110:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":257,"nodeType":"ExpressionStatement","src":"5153:110:0"},{"eventCall":{"arguments":[{"id":259,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"5300:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":260,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"5308:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":258,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5279:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5279:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":262,"nodeType":"EmitStatement","src":"5274:43:0"},{"expression":{"id":265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":263,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"5328:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":264,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"5337:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5328:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":266,"nodeType":"ExpressionStatement","src":"5328:17:0"}]},"id":268,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"5096:18:0","nodeType":"FunctionDefinition","parameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"newOwner","nameLocation":"5123:8:0","nodeType":"VariableDeclaration","scope":268,"src":"5115:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":244,"name":"address","nodeType":"ElementaryTypeName","src":"5115:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5114:18:0"},"returnParameters":{"id":247,"nodeType":"ParameterList","parameters":[],"src":"5142:0:0"},"scope":269,"src":"5087:266:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":616,"src":"4264:1092:0","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":270,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":269,"src":"5381:7:0"},"id":271,"nodeType":"InheritanceSpecifier","src":"5381:7:0"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":615,"linearizedBaseContracts":[615,269,159],"name":"Coinflip","nameLocation":"5369:8:0","nodeType":"ContractDefinition","nodes":[{"id":274,"libraryName":{"id":272,"name":"SafeMath","nodeType":"IdentifierPath","referencedDeclaration":138,"src":"5402:8:0"},"nodeType":"UsingForDirective","src":"5396:27:0","typeName":{"id":273,"name":"uint256","nodeType":"ElementaryTypeName","src":"5415:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"canonicalName":"Coinflip.Bet","id":281,"members":[{"constant":false,"id":276,"mutability":"mutable","name":"playerAddress","nameLocation":"5461:13:0","nodeType":"VariableDeclaration","scope":281,"src":"5453:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":275,"name":"address","nodeType":"ElementaryTypeName","src":"5453:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":278,"mutability":"mutable","name":"betValue","nameLocation":"5493:8:0","nodeType":"VariableDeclaration","scope":281,"src":"5485:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":277,"name":"uint256","nodeType":"ElementaryTypeName","src":"5485:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":280,"mutability":"mutable","name":"headsTails","nameLocation":"5520:10:0","nodeType":"VariableDeclaration","scope":281,"src":"5512:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":279,"name":"uint256","nodeType":"ElementaryTypeName","src":"5512:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Bet","nameLocation":"5438:3:0","nodeType":"StructDefinition","scope":615,"src":"5431:107:0","visibility":"public"},{"constant":false,"functionSelector":"252f4d81","id":285,"mutability":"mutable","name":"playerWinnings","nameLocation":"5581:14:0","nodeType":"VariableDeclaration","scope":615,"src":"5546:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":284,"keyType":{"id":282,"name":"address","nodeType":"ElementaryTypeName","src":"5554:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"5546:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":283,"name":"uint256","nodeType":"ElementaryTypeName","src":"5565:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"e437786d","id":290,"mutability":"mutable","name":"waiting","nameLocation":"5633:7:0","nodeType":"VariableDeclaration","scope":615,"src":"5602:38:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Bet_$281_storage_$","typeString":"mapping(address => struct Coinflip.Bet)"},"typeName":{"id":289,"keyType":{"id":286,"name":"address","nodeType":"ElementaryTypeName","src":"5610:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"5602:23:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Bet_$281_storage_$","typeString":"mapping(address => struct Coinflip.Bet)"},"valueType":{"id":288,"nodeType":"UserDefinedTypeName","pathNode":{"id":287,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":281,"src":"5621:3:0"},"referencedDeclaration":281,"src":"5621:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$281_storage_ptr","typeString":"struct Coinflip.Bet"}}},"visibility":"public"},{"anonymous":false,"id":294,"name":"logNewProvableQuery","nameLocation":"5655:19:0","nodeType":"EventDefinition","parameters":{"id":293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":292,"indexed":false,"mutability":"mutable","name":"description","nameLocation":"5682:11:0","nodeType":"VariableDeclaration","scope":294,"src":"5675:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":291,"name":"string","nodeType":"ElementaryTypeName","src":"5675:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5674:20:0"},"src":"5649:46:0"},{"anonymous":false,"id":300,"name":"userWithdrawal","nameLocation":"5707:14:0","nodeType":"EventDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"indexed":true,"mutability":"mutable","name":"caller","nameLocation":"5738:6:0","nodeType":"VariableDeclaration","scope":300,"src":"5722:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":295,"name":"address","nodeType":"ElementaryTypeName","src":"5722:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":298,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"5754:6:0","nodeType":"VariableDeclaration","scope":300,"src":"5746:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":297,"name":"uint256","nodeType":"ElementaryTypeName","src":"5746:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5721:40:0"},"src":"5701:61:0"},{"anonymous":false,"id":304,"name":"filpFinshed","nameLocation":"5774:11:0","nodeType":"EventDefinition","parameters":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"indexed":false,"mutability":"mutable","name":"result","nameLocation":"5791:6:0","nodeType":"VariableDeclaration","scope":304,"src":"5786:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":301,"name":"uint","nodeType":"ElementaryTypeName","src":"5786:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5785:13:0"},"src":"5768:31:0"},{"constant":false,"id":306,"mutability":"mutable","name":"lastHash","nameLocation":"5815:8:0","nodeType":"VariableDeclaration","scope":615,"src":"5807:16:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":305,"name":"uint256","nodeType":"ElementaryTypeName","src":"5807:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"FACTOR","nameLocation":"5838:6:0","nodeType":"VariableDeclaration","scope":615,"src":"5830:103:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":307,"name":"uint256","nodeType":"ElementaryTypeName","src":"5830:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3537383936303434363138363538303937373131373835343932353034333433393533393236363334393932333332383230323832303139373238373932303033393536353634383139393638","id":308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5856:77:0","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1","typeString":"int_const 5789...(69 digits omitted)...9968"},"value":"57896044618658097711785492504343953926634992332820282019728792003956564819968"},"visibility":"internal"},{"constant":false,"functionSelector":"8b7afe2e","id":311,"mutability":"mutable","name":"contractBalance","nameLocation":"5954:15:0","nodeType":"VariableDeclaration","scope":615,"src":"5942:27:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":310,"name":"uint","nodeType":"ElementaryTypeName","src":"5942:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"876c0d59","id":314,"mutability":"mutable","name":"freeCallback","nameLocation":"5990:12:0","nodeType":"VariableDeclaration","scope":615,"src":"5978:31:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":312,"name":"bool","nodeType":"ElementaryTypeName","src":"5978:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"74727565","id":313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6005:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"public"},{"body":{"id":317,"nodeType":"Block","src":"6032:2:0","statements":[]},"id":318,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":315,"nodeType":"ParameterList","parameters":[],"src":"6029:2:0"},"returnParameters":{"id":316,"nodeType":"ParameterList","parameters":[],"src":"6032:0:0"},"scope":615,"src":"6018:16:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":365,"nodeType":"Block","src":"6086:298:0","statements":[{"assignments":[324],"declarations":[{"constant":false,"id":324,"mutability":"mutable","name":"blockValue","nameLocation":"6105:10:0","nodeType":"VariableDeclaration","scope":365,"src":"6097:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":323,"name":"uint256","nodeType":"ElementaryTypeName","src":"6097:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":335,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"31","id":331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6153:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"expression":{"id":328,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6136:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","src":"6136:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":54,"src":"6136:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6136:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":327,"name":"blockhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-5,"src":"6126:9:0","typeDescriptions":{"typeIdentifier":"t_function_blockhash_view$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256) view returns (bytes32)"}},"id":333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6126:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":326,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6118:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":325,"name":"uint256","nodeType":"ElementaryTypeName","src":"6118:7:0","typeDescriptions":{}}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6118:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6097:60:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":336,"name":"lastHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"6174:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":337,"name":"blockValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"6186:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6174:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":343,"nodeType":"IfStatement","src":"6170:63:0","trueBody":{"id":342,"nodeType":"Block","src":"6198:35:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":339,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"6213:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$__$returns$__$","typeString":"function () pure"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6213:8:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":341,"nodeType":"ExpressionStatement","src":"6213:8:0"}]}},{"expression":{"id":346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":344,"name":"lastHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"6245:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":345,"name":"blockValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"6256:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6245:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":347,"nodeType":"ExpressionStatement","src":"6245:21:0"},{"assignments":[349],"declarations":[{"constant":false,"id":349,"mutability":"mutable","name":"coinFlip","nameLocation":"6285:8:0","nodeType":"VariableDeclaration","scope":365,"src":"6277:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":348,"name":"uint256","nodeType":"ElementaryTypeName","src":"6277:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":353,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":350,"name":"blockValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"6296:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6309:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6296:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6277:33:0"},{"assignments":[355],"declarations":[{"constant":false,"id":355,"mutability":"mutable","name":"side","nameLocation":"6326:4:0","nodeType":"VariableDeclaration","scope":365,"src":"6321:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":354,"name":"uint","nodeType":"ElementaryTypeName","src":"6321:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":362,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":356,"name":"coinFlip","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"6333:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6345:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6333:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6353:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6333:21:0","trueExpression":{"hexValue":"31","id":359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6349:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"6321:33:0"},{"expression":{"id":363,"name":"side","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"6372:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":322,"id":364,"nodeType":"Return","src":"6365:11:0"}]},"id":366,"implemented":true,"kind":"function","modifiers":[],"name":"getResult","nameLocation":"6051:9:0","nodeType":"FunctionDefinition","parameters":{"id":319,"nodeType":"ParameterList","parameters":[],"src":"6060:2:0"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":366,"src":"6080:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":320,"name":"uint","nodeType":"ElementaryTypeName","src":"6080:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6079:6:0"},"scope":615,"src":"6042:342:0","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":476,"nodeType":"Block","src":"7124:1032:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":373,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"7143:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":374,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7161:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"7161:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7143:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"576520646f6e2774206861766520656e6f7567682066756e6473","id":377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7172:28:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_a6e93ec281220a68512a2e3176b4a5c72e33af61f39082eda06712ffff289086","typeString":"literal_string \"We don't have enough funds\""},"value":"We don't have enough funds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a6e93ec281220a68512a2e3176b4a5c72e33af61f39082eda06712ffff289086","typeString":"literal_string \"We don't have enough funds\""}],"id":372,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7135:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7135:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":379,"nodeType":"ExpressionStatement","src":"7135:66:0"},{"assignments":[381],"declarations":[{"constant":false,"id":381,"mutability":"mutable","name":"_player","nameLocation":"7222:7:0","nodeType":"VariableDeclaration","scope":476,"src":"7214:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":380,"name":"address","nodeType":"ElementaryTypeName","src":"7214:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":384,"initialValue":{"expression":{"id":382,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7232:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7232:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7214:28:0"},{"assignments":[387],"declarations":[{"constant":false,"id":387,"mutability":"mutable","name":"postBet","nameLocation":"7264:7:0","nodeType":"VariableDeclaration","scope":476,"src":"7253:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$281_memory_ptr","typeString":"struct Coinflip.Bet"},"typeName":{"id":386,"nodeType":"UserDefinedTypeName","pathNode":{"id":385,"name":"Bet","nodeType":"IdentifierPath","referencedDeclaration":281,"src":"7253:3:0"},"referencedDeclaration":281,"src":"7253:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$281_storage_ptr","typeString":"struct Coinflip.Bet"}},"visibility":"internal"}],"id":388,"nodeType":"VariableDeclarationStatement","src":"7253:18:0"},{"expression":{"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":389,"name":"postBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7282:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$281_memory_ptr","typeString":"struct Coinflip.Bet memory"}},"id":391,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"playerAddress","nodeType":"MemberAccess","referencedDeclaration":276,"src":"7282:21:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":392,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7306:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7306:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7282:34:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":395,"nodeType":"ExpressionStatement","src":"7282:34:0"},{"expression":{"id":401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":396,"name":"postBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7327:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$281_memory_ptr","typeString":"struct Coinflip.Bet memory"}},"id":398,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"betValue","nodeType":"MemberAccess","referencedDeclaration":278,"src":"7327:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":399,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7346:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"7346:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7327:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":402,"nodeType":"ExpressionStatement","src":"7327:28:0"},{"expression":{"id":407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":403,"name":"postBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7366:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$281_memory_ptr","typeString":"struct Coinflip.Bet memory"}},"id":405,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"headsTails","nodeType":"MemberAccess","referencedDeclaration":280,"src":"7366:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":406,"name":"oneZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"7387:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7366:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":408,"nodeType":"ExpressionStatement","src":"7366:28:0"},{"assignments":[410],"declarations":[{"constant":false,"id":410,"mutability":"mutable","name":"flipResult","nameLocation":"7412:10:0","nodeType":"VariableDeclaration","scope":476,"src":"7407:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":409,"name":"uint","nodeType":"ElementaryTypeName","src":"7407:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":413,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":411,"name":"getResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"7425:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7425:11:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7407:29:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":414,"name":"flipResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"7453:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":415,"name":"postBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7467:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$281_memory_ptr","typeString":"struct Coinflip.Bet memory"}},"id":416,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"headsTails","nodeType":"MemberAccess","referencedDeclaration":280,"src":"7467:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7453:32:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":474,"nodeType":"Block","src":"7861:288:0","statements":[{"eventCall":{"arguments":[{"hexValue":"30","id":458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":457,"name":"filpFinshed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"7902:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7902:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":460,"nodeType":"EmitStatement","src":"7897:19:0"},{"expression":{"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":461,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"7931:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":464,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"7980:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"expression":{"id":467,"name":"postBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"8102:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$281_memory_ptr","typeString":"struct Coinflip.Bet memory"}},"id":468,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"betValue","nodeType":"MemberAccess","referencedDeclaration":278,"src":"8102:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8120:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":465,"name":"SafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"8089:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeMath_$138_$","typeString":"type(library SafeMath)"}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":54,"src":"8089:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8089:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":462,"name":"SafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"7949:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeMath_$138_$","typeString":"type(library SafeMath)"}},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":28,"src":"7949:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7949:188:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7931:206:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":473,"nodeType":"ExpressionStatement","src":"7931:206:0"}]},"id":475,"nodeType":"IfStatement","src":"7449:700:0","trueBody":{"id":456,"nodeType":"Block","src":"7487:368:0","statements":[{"eventCall":{"arguments":[{"hexValue":"31","id":419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7541:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":418,"name":"filpFinshed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"7529:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7529:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":421,"nodeType":"EmitStatement","src":"7524:19:0"},{"assignments":[423],"declarations":[{"constant":false,"id":423,"mutability":"mutable","name":"winAmount","nameLocation":"7563:9:0","nodeType":"VariableDeclaration","scope":456,"src":"7558:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":422,"name":"uint","nodeType":"ElementaryTypeName","src":"7558:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":434,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":428,"name":"postBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7601:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$281_memory_ptr","typeString":"struct Coinflip.Bet memory"}},"id":429,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"betValue","nodeType":"MemberAccess","referencedDeclaration":278,"src":"7601:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"32","id":430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7619:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"id":426,"name":"SafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"7588:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeMath_$138_$","typeString":"type(library SafeMath)"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":89,"src":"7588:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7588:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7623:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":424,"name":"SafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"7575:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeMath_$138_$","typeString":"type(library SafeMath)"}},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":54,"src":"7575:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7575:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7558:67:0"},{"expression":{"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":435,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"7640:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":438,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"7671:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":439,"name":"postBet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7688:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Bet_$281_memory_ptr","typeString":"struct Coinflip.Bet memory"}},"id":440,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"betValue","nodeType":"MemberAccess","referencedDeclaration":278,"src":"7688:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":436,"name":"SafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"7658:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeMath_$138_$","typeString":"type(library SafeMath)"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":54,"src":"7658:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7658:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:65:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":443,"nodeType":"ExpressionStatement","src":"7640:65:0"},{"expression":{"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":444,"name":"playerWinnings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"7720:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":446,"indexExpression":{"id":445,"name":"_player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"7735:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7720:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":449,"name":"playerWinnings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"7777:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":451,"indexExpression":{"id":450,"name":"_player","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"7792:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7777:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":452,"name":"winAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"7819:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":447,"name":"SafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"7746:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeMath_$138_$","typeString":"type(library SafeMath)"}},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":28,"src":"7746:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7746:97:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7720:123:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":455,"nodeType":"ExpressionStatement","src":"7720:123:0"}]}}]},"documentation":{"id":367,"nodeType":"StructuredDocumentation","src":"6392:678:0","text":"@notice This function simulates a coin flip which makes a call to the Provable oracle for\n        a random number.\n@dev The function first checks if this is the very first call to the Provable oracle in order\n     for the user to not pay for the first free call. This also adds user values to two different\n     mappings: 'waiting' and 'afterWaiting.' Both mappings are necessary in order to bridge the\n     user's address (which we has access to here with msg.sender) and the user's queryId sent from\n     Provable after the function call.\n@param oneZero - The numerical value of heads(0) or tails(1)"},"functionSelector":"221e885d","id":477,"implemented":true,"kind":"function","modifiers":[],"name":"flip","nameLocation":"7087:4:0","nodeType":"FunctionDefinition","parameters":{"id":370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":369,"mutability":"mutable","name":"oneZero","nameLocation":"7100:7:0","nodeType":"VariableDeclaration","scope":477,"src":"7092:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":368,"name":"uint256","nodeType":"ElementaryTypeName","src":"7092:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7091:17:0"},"returnParameters":{"id":371,"nodeType":"ParameterList","parameters":[],"src":"7124:0:0"},"scope":615,"src":"7078:1078:0","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":519,"nodeType":"Block","src":"8203:283:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":481,"name":"playerWinnings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"8222:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":484,"indexExpression":{"expression":{"id":482,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8237:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8237:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8222:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8251:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8222:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f2066756e647320746f207769746864726177","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8254:22:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9","typeString":"literal_string \"No funds to withdraw\""},"value":"No funds to withdraw"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9","typeString":"literal_string \"No funds to withdraw\""}],"id":480,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8214:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8214:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":489,"nodeType":"ExpressionStatement","src":"8214:63:0"},{"assignments":[491],"declarations":[{"constant":false,"id":491,"mutability":"mutable","name":"toTransfer","nameLocation":"8293:10:0","nodeType":"VariableDeclaration","scope":519,"src":"8288:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":490,"name":"uint","nodeType":"ElementaryTypeName","src":"8288:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":496,"initialValue":{"baseExpression":{"id":492,"name":"playerWinnings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"8306:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":495,"indexExpression":{"expression":{"id":493,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8321:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8321:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8306:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8288:44:0"},{"expression":{"id":502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":497,"name":"playerWinnings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"8343:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":500,"indexExpression":{"expression":{"id":498,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8358:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8358:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8343:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8372:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8343:30:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":503,"nodeType":"ExpressionStatement","src":"8343:30:0"},{"expression":{"arguments":[{"id":510,"name":"toTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"8413:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":506,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8392:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8392:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8384:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":504,"name":"address","nodeType":"ElementaryTypeName","src":"8384:8:0","stateMutability":"payable","typeDescriptions":{}}},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8384:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"8384:28:0","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8384:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":512,"nodeType":"ExpressionStatement","src":"8384:40:0"},{"eventCall":{"arguments":[{"expression":{"id":514,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8455:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8455:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":516,"name":"toTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"8467:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":513,"name":"userWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"8440:14:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8440:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":518,"nodeType":"EmitStatement","src":"8435:43:0"}]},"functionSelector":"b3e25412","id":520,"implemented":true,"kind":"function","modifiers":[],"name":"withdrawUserWinnings","nameLocation":"8173:20:0","nodeType":"FunctionDefinition","parameters":{"id":478,"nodeType":"ParameterList","parameters":[],"src":"8193:2:0"},"returnParameters":{"id":479,"nodeType":"ParameterList","parameters":[],"src":"8203:0:0"},"scope":615,"src":"8164:322:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":530,"nodeType":"Block","src":"8551:52:0","statements":[{"expression":{"baseExpression":{"id":525,"name":"playerWinnings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"8569:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":528,"indexExpression":{"expression":{"id":526,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8584:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8584:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8569:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":524,"id":529,"nodeType":"Return","src":"8562:33:0"}]},"functionSelector":"741c0a0f","id":531,"implemented":true,"kind":"function","modifiers":[],"name":"getWinningsBalance","nameLocation":"8503:18:0","nodeType":"FunctionDefinition","parameters":{"id":521,"nodeType":"ParameterList","parameters":[],"src":"8521:2:0"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":531,"src":"8545:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":522,"name":"uint","nodeType":"ElementaryTypeName","src":"8545:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8544:6:0"},"scope":615,"src":"8494:109:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":546,"nodeType":"Block","src":"8763:77:0","statements":[{"expression":{"id":544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":537,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"8774:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":540,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"8805:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":541,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8822:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"8822:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":538,"name":"SafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"8792:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeMath_$138_$","typeString":"type(library SafeMath)"}},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":28,"src":"8792:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8792:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8774:58:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":545,"nodeType":"ExpressionStatement","src":"8774:58:0"}]},"documentation":{"id":532,"nodeType":"StructuredDocumentation","src":"8611:95:0","text":"@notice The following functions are reserved for the owner of the contract."},"functionSelector":"bd097e21","id":547,"implemented":true,"kind":"function","modifiers":[{"id":535,"kind":"modifierInvocation","modifierName":{"id":534,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":210,"src":"8753:9:0"},"nodeType":"ModifierInvocation","src":"8753:9:0"}],"name":"fundContract","nameLocation":"8723:12:0","nodeType":"FunctionDefinition","parameters":{"id":533,"nodeType":"ParameterList","parameters":[],"src":"8735:2:0"},"returnParameters":{"id":536,"nodeType":"ParameterList","parameters":[],"src":"8763:0:0"},"scope":615,"src":"8714:126:0","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":567,"nodeType":"Block","src":"8897:136:0","statements":[{"expression":{"id":565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":552,"name":"playerWinnings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"8908:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":555,"indexExpression":{"expression":{"id":553,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8923:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8923:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8908:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":558,"name":"playerWinnings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"8964:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":561,"indexExpression":{"expression":{"id":559,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8979:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"8979:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8964:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":562,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9005:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"9005:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":556,"name":"SafeMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"8937:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeMath_$138_$","typeString":"type(library SafeMath)"}},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":28,"src":"8937:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8937:88:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8908:117:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":566,"nodeType":"ExpressionStatement","src":"8908:117:0"}]},"functionSelector":"a5ce8496","id":568,"implemented":true,"kind":"function","modifiers":[{"id":550,"kind":"modifierInvocation","modifierName":{"id":549,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":210,"src":"8887:9:0"},"nodeType":"ModifierInvocation","src":"8887:9:0"}],"name":"fundWinnings","nameLocation":"8857:12:0","nodeType":"FunctionDefinition","parameters":{"id":548,"nodeType":"ParameterList","parameters":[],"src":"8869:2:0"},"returnParameters":{"id":551,"nodeType":"ParameterList","parameters":[],"src":"8897:0:0"},"scope":615,"src":"8848:185:0","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":590,"nodeType":"Block","src":"9081:133:0","statements":[{"assignments":[574],"declarations":[{"constant":false,"id":574,"mutability":"mutable","name":"toTransfer","nameLocation":"9097:10:0","nodeType":"VariableDeclaration","scope":590,"src":"9092:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":573,"name":"uint","nodeType":"ElementaryTypeName","src":"9092:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":576,"initialValue":{"id":575,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"9110:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9092:33:0"},{"expression":{"id":579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":577,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"9136:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9154:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9136:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":580,"nodeType":"ExpressionStatement","src":"9136:19:0"},{"expression":{"arguments":[{"id":587,"name":"toTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"9195:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":583,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9174:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"9174:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9166:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":581,"name":"address","nodeType":"ElementaryTypeName","src":"9166:8:0","stateMutability":"payable","typeDescriptions":{}}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9166:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"9166:28:0","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9166:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":589,"nodeType":"ExpressionStatement","src":"9166:40:0"}]},"functionSelector":"853828b6","id":591,"implemented":true,"kind":"function","modifiers":[{"id":571,"kind":"modifierInvocation","modifierName":{"id":570,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":210,"src":"9071:9:0"},"nodeType":"ModifierInvocation","src":"9071:9:0"}],"name":"withdrawAll","nameLocation":"9050:11:0","nodeType":"FunctionDefinition","parameters":{"id":569,"nodeType":"ParameterList","parameters":[],"src":"9061:2:0"},"returnParameters":{"id":572,"nodeType":"ParameterList","parameters":[],"src":"9081:0:0"},"scope":615,"src":"9041:173:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":613,"nodeType":"Block","src":"9275:114:0","statements":[{"assignments":[599,null],"declarations":[{"constant":false,"id":599,"mutability":"mutable","name":"sent","nameLocation":"9292:4:0","nodeType":"VariableDeclaration","scope":613,"src":"9287:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":598,"name":"bool","nodeType":"ElementaryTypeName","src":"9287:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":607,"initialValue":{"arguments":[{"hexValue":"","id":605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9330:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":600,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"9302:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9302:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"9302:12:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":603,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"9322:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"9302:27:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9302:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"9286:47:0"},{"expression":{"arguments":[{"id":609,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"9352:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4661696c656420746f2073656e64204574686572","id":610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9358:22:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""},"value":"Failed to send Ether"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb","typeString":"literal_string \"Failed to send Ether\""}],"id":608,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9344:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9344:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":612,"nodeType":"ExpressionStatement","src":"9344:37:0"}]},"functionSelector":"fe96973a","id":614,"implemented":true,"kind":"function","modifiers":[{"id":596,"kind":"modifierInvocation","modifierName":{"id":595,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":210,"src":"9265:9:0"},"nodeType":"ModifierInvocation","src":"9265:9:0"}],"name":"claimETH","nameLocation":"9231:8:0","nodeType":"FunctionDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":593,"mutability":"mutable","name":"amount","nameLocation":"9248:6:0","nodeType":"VariableDeclaration","scope":614,"src":"9240:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":592,"name":"uint256","nodeType":"ElementaryTypeName","src":"9240:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9239:16:0"},"returnParameters":{"id":597,"nodeType":"ParameterList","parameters":[],"src":"9275:0:0"},"scope":615,"src":"9222:167:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":616,"src":"5360:4032:0","usedErrors":[]}],"src":"39:9355:0"},"id":0}},"contracts":{"contracts/Coinflip.sol":{"Coinflip":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"result","type":"uint256"}],"name":"filpFinshed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"description","type":"string"}],"name":"logNewProvableQuery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"userWithdrawal","type":"event"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"claimETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"contractBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"oneZero","type":"uint256"}],"name":"flip","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"freeCallback","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fundContract","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"fundWinnings","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getWinningsBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"playerWinnings","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"waiting","outputs":[{"internalType":"address","name":"playerAddress","type":"address"},{"internalType":"uint256","name":"betValue","type":"uint256"},{"internalType":"uint256","name":"headsTails","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawUserWinnings","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"flip(uint256)":{"details":"The function first checks if this is the very first call to the Provable oracle in order     for the user to not pay for the first free call. This also adds user values to two different     mappings: 'waiting' and 'afterWaiting.' Both mappings are necessary in order to bridge the     user's address (which we has access to here with msg.sender) and the user's queryId sent from     Provable after the function call.","params":{"oneZero":"- The numerical value of heads(0) or tails(1)"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"6080604052600160ff1b6004556006805460ff1916600117905534801561002557600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610b21806100766000396000f3fe6080604052600436106100dd5760003560e01c80638da5cb5b1161007f578063bd097e2111610059578063bd097e2114610208578063e437786d14610210578063f2fde38b1461027c578063fe96973a1461029c57600080fd5b80638da5cb5b146101c3578063a5ce8496146101eb578063b3e25412146101f357600080fd5b8063741c0a0f116100bb578063741c0a0f1461014c578063853828b61461016e578063876c0d59146101835780638b7afe2e146101ad57600080fd5b8063221e885d146100e2578063252f4d81146100f7578063715018a614610137575b600080fd5b6100f56100f03660046109fc565b6102bc565b005b34801561010357600080fd5b506101246101123660046109d5565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561014357600080fd5b506100f5610442565b34801561015857600080fd5b5033600090815260016020526040902054610124565b34801561017a57600080fd5b506100f56104b6565b34801561018f57600080fd5b5060065461019d9060ff1681565b604051901515815260200161012e565b3480156101b957600080fd5b5061012460055481565b3480156101cf57600080fd5b506000546040516001600160a01b03909116815260200161012e565b6100f561051c565b3480156101ff57600080fd5b506100f5610572565b6100f561063f565b34801561021c57600080fd5b5061025761022b3660046109d5565b60026020819052600091825260409091208054600182015491909201546001600160a01b039092169183565b604080516001600160a01b03909416845260208401929092529082015260600161012e565b34801561028857600080fd5b506100f56102973660046109d5565b61067a565b3480156102a857600080fd5b506100f56102b73660046109fc565b6106b0565b34600554116103125760405162461bcd60e51b815260206004820152601a60248201527f576520646f6e2774206861766520656e6f7567682066756e647300000000000060448201526064015b60405180910390fd5b60408051606081018252338082523460208301529181018390526000610336610774565b905081604001518114156103ea57604051600181527f8dd156d70678f56c23b7158d46721d0f9dc9873d9956eab396dbf665b156c4df9060200160405180910390a1600061039361038c846020015160026107c8565b6000610850565b90506103a56005548460200151610850565b6005556001600160a01b0384166000908152600160205260409020546103cb90826108b6565b6001600160a01b0385166000908152600160205260409020555061043c565b604051600081527f8dd156d70678f56c23b7158d46721d0f9dc9873d9956eab396dbf665b156c4df9060200160405180910390a161043860055461043384602001516000610850565b6108b6565b6005555b50505050565b6000546001600160a01b0316331461046c5760405162461bcd60e51b815260040161030990610a14565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146104e05760405162461bcd60e51b815260040161030990610a14565b600580546000918290556040519091339183156108fc0291849190818181858888f19350505050158015610518573d6000803e3d6000fd5b5050565b6000546001600160a01b031633146105465760405162461bcd60e51b815260040161030990610a14565b3360009081526001602052604090205461056090346108b6565b33600090815260016020526040902055565b336000908152600160205260409020546105c55760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b6044820152606401610309565b33600081815260016020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015610606573d6000803e3d6000fd5b5060405181815233907f42b2a4ad2d4bdf57e819ccd3c6ce6d0a8d6d20b5d3dbf94ef2b05c42f523c6109060200160405180910390a250565b6000546001600160a01b031633146106695760405162461bcd60e51b815260040161030990610a14565b610675600554346108b6565b600555565b6000546001600160a01b031633146106a45760405162461bcd60e51b815260040161030990610a14565b6106ad81610915565b50565b6000546001600160a01b031633146106da5760405162461bcd60e51b815260040161030990610a14565b600080546040516001600160a01b039091169083908381818185875af1925050503d8060008114610727576040519150601f19603f3d011682016040523d82523d6000602084013e61072c565b606091505b50509050806105185760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610309565b600080610782436001610850565b6003549040915081141561079557600080fd5b600381905560006107a7600283610aab565b90506000816001146107ba5760006107bd565b60015b60ff16949350505050565b6000826107d75750600061084a565b60006107e38385610a75565b9050826107f08583610a61565b146108475760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610309565b90505b92915050565b6000828211156108a25760405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401610309565b60006108ae8385610a94565b949350505050565b6000806108c38385610a49565b9050838110156108475760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610309565b6001600160a01b03811661097a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610309565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000602082840312156109e6578081fd5b81356001600160a01b0381168114610847578182fd5b600060208284031215610a0d578081fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610a5c57610a5c610abf565b500190565b600082610a7057610a70610ad5565b500490565b6000816000190483118215151615610a8f57610a8f610abf565b500290565b600082821015610aa657610aa6610abf565b500390565b600082610aba57610aba610ad5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212209b38839cd7118600145494489ff7956599255888bbe82796b04dfc78282766d664736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x4 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH2 0xB21 DUP1 PUSH2 0x76 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xBD097E21 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xBD097E21 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0xE437786D EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xA5CE8496 EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0xB3E25412 EQ PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x741C0A0F GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x741C0A0F EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x853828B6 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x876C0D59 EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x8B7AFE2E EQ PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x221E885D EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x252F4D81 EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x137 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF5 PUSH2 0xF0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x124 PUSH2 0x112 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x442 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x124 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x4B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x19D SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x124 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12E JUMP JUMPDEST PUSH2 0xF5 PUSH2 0x51C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x572 JUMP JUMPDEST PUSH2 0xF5 PUSH2 0x63F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x257 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0x9D5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x12E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D5 JUMP JUMPDEST PUSH2 0x67A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x6B0 JUMP JUMPDEST CALLVALUE PUSH1 0x5 SLOAD GT PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x576520646F6E2774206861766520656E6F7567682066756E6473000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE CALLER DUP1 DUP3 MSTORE CALLVALUE PUSH1 0x20 DUP4 ADD MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 PUSH2 0x336 PUSH2 0x774 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD DUP2 EQ ISZERO PUSH2 0x3EA JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x8DD156D70678F56C23B7158D46721D0F9DC9873D9956EAB396DBF665B156C4DF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0x393 PUSH2 0x38C DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x2 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x850 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A5 PUSH1 0x5 SLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x850 JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3CB SWAP1 DUP3 PUSH2 0x8B6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH32 0x8DD156D70678F56C23B7158D46721D0F9DC9873D9956EAB396DBF665B156C4DF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x438 PUSH1 0x5 SLOAD PUSH2 0x433 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x0 PUSH2 0x850 JUMP JUMPDEST PUSH2 0x8B6 JUMP JUMPDEST PUSH1 0x5 SSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x46C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 CALLER SWAP2 DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 DUP5 SWAP2 SWAP1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x518 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x546 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x560 SWAP1 CALLVALUE PUSH2 0x8B6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x5C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x4E6F2066756E647320746F207769746864726177 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE SWAP1 MLOAD SWAP1 SWAP3 SWAP2 DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x606 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE CALLER SWAP1 PUSH32 0x42B2A4AD2D4BDF57E819CCD3C6CE6D0A8D6D20B5D3DBF94EF2B05C42F523C610 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x669 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x675 PUSH1 0x5 SLOAD CALLVALUE PUSH2 0x8B6 JUMP JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x6AD DUP2 PUSH2 0x915 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x727 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x72C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x518 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x782 NUMBER PUSH1 0x1 PUSH2 0x850 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 BLOCKHASH SWAP2 POP DUP2 EQ ISZERO PUSH2 0x795 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x0 PUSH2 0x7A7 PUSH1 0x2 DUP4 PUSH2 0xAAB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 EQ PUSH2 0x7BA JUMPI PUSH1 0x0 PUSH2 0x7BD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7D7 JUMPI POP PUSH1 0x0 PUSH2 0x84A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E3 DUP4 DUP6 PUSH2 0xA75 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x7F0 DUP6 DUP4 PUSH2 0xA61 JUMP JUMPDEST EQ PUSH2 0x847 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D756C7469706C69636174696F6E206F766572666C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x8A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AE DUP4 DUP6 PUSH2 0xA94 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x8C3 DUP4 DUP6 PUSH2 0xA49 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x847 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x97A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x847 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA0D JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xA5C JUMPI PUSH2 0xA5C PUSH2 0xABF JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA70 JUMPI PUSH2 0xA70 PUSH2 0xAD5 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xA8F JUMPI PUSH2 0xA8F PUSH2 0xABF JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xAA6 JUMPI PUSH2 0xAA6 PUSH2 0xABF JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xABA JUMPI PUSH2 0xABA PUSH2 0xAD5 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP12 CODESIZE DUP4 SWAP13 0xD7 GT DUP7 STOP EQ SLOAD SWAP5 0x48 SWAP16 0xF7 SWAP6 PUSH6 0x99255888BBE8 0x27 SWAP7 0xB0 0x4D 0xFC PUSH25 0x282766D664736F6C6343000804003300000000000000000000 ","sourceMap":"5360:4032:0:-:0;;;-1:-1:-1;;;5830:103:0;;5978:31;;;-1:-1:-1;;5978:31:0;6005:4;5978:31;;;6018:16;;;;;;;;;-1:-1:-1;4472:17:0;4515:18;;-1:-1:-1;;;;;;4515:18:0;4006:10;4515:18;;;;;4549:43;;4006:10;;;;4549:43;;4472:17;;4549:43;4447:153;5360:4032;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5919:1","statements":[{"nodeType":"YulBlock","src":"6:3:1","statements":[]},{"body":{"nodeType":"YulBlock","src":"84:236:1","statements":[{"body":{"nodeType":"YulBlock","src":"130:26:1","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"139:6:1"},{"name":"value0","nodeType":"YulIdentifier","src":"147:6:1"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"132:6:1"},"nodeType":"YulFunctionCall","src":"132:22:1"},"nodeType":"YulExpressionStatement","src":"132:22:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"105:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"114:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"101:3:1"},"nodeType":"YulFunctionCall","src":"101:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"126:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"97:3:1"},"nodeType":"YulFunctionCall","src":"97:32:1"},"nodeType":"YulIf","src":"94:2:1"},{"nodeType":"YulVariableDeclaration","src":"165:36:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"191:9:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"178:12:1"},"nodeType":"YulFunctionCall","src":"178:23:1"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"169:5:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"264:26:1","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"273:6:1"},{"name":"value0","nodeType":"YulIdentifier","src":"281:6:1"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"266:6:1"},"nodeType":"YulFunctionCall","src":"266:22:1"},"nodeType":"YulExpressionStatement","src":"266:22:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:1"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"234:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"249:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"254:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"245:3:1"},"nodeType":"YulFunctionCall","src":"245:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"258:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"241:3:1"},"nodeType":"YulFunctionCall","src":"241:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"230:3:1"},"nodeType":"YulFunctionCall","src":"230:31:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"220:2:1"},"nodeType":"YulFunctionCall","src":"220:42:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"213:6:1"},"nodeType":"YulFunctionCall","src":"213:50:1"},"nodeType":"YulIf","src":"210:2:1"},{"nodeType":"YulAssignment","src":"299:15:1","value":{"name":"value","nodeType":"YulIdentifier","src":"309:5:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"299:6:1"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"61:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"73:6:1","type":""}],"src":"14:306:1"},{"body":{"nodeType":"YulBlock","src":"395:120:1","statements":[{"body":{"nodeType":"YulBlock","src":"441:26:1","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"450:6:1"},{"name":"value0","nodeType":"YulIdentifier","src":"458:6:1"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"443:6:1"},"nodeType":"YulFunctionCall","src":"443:22:1"},"nodeType":"YulExpressionStatement","src":"443:22:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"416:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"412:3:1"},"nodeType":"YulFunctionCall","src":"412:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"437:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"408:3:1"},"nodeType":"YulFunctionCall","src":"408:32:1"},"nodeType":"YulIf","src":"405:2:1"},{"nodeType":"YulAssignment","src":"476:33:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"499:9:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"486:12:1"},"nodeType":"YulFunctionCall","src":"486:23:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"476:6:1"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"361:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"372:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"384:6:1","type":""}],"src":"325:190:1"},{"body":{"nodeType":"YulBlock","src":"711:14:1","statements":[{"nodeType":"YulAssignment","src":"713:10:1","value":{"name":"pos","nodeType":"YulIdentifier","src":"720:3:1"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"713:3:1"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"695:3:1","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"703:3:1","type":""}],"src":"520:205:1"},{"body":{"nodeType":"YulBlock","src":"831:102:1","statements":[{"nodeType":"YulAssignment","src":"841:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"864:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"849:3:1"},"nodeType":"YulFunctionCall","src":"849:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"841:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"883:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"898:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"914:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"919:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"910:3:1"},"nodeType":"YulFunctionCall","src":"910:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"923:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"906:3:1"},"nodeType":"YulFunctionCall","src":"906:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"894:3:1"},"nodeType":"YulFunctionCall","src":"894:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"876:6:1"},"nodeType":"YulFunctionCall","src":"876:51:1"},"nodeType":"YulExpressionStatement","src":"876:51:1"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"800:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"811:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"822:4:1","type":""}],"src":"730:203:1"},{"body":{"nodeType":"YulBlock","src":"1095:188:1","statements":[{"nodeType":"YulAssignment","src":"1105:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1117:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1128:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1113:3:1"},"nodeType":"YulFunctionCall","src":"1113:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1105:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1147:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1162:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1178:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1183:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1174:3:1"},"nodeType":"YulFunctionCall","src":"1174:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"1187:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1170:3:1"},"nodeType":"YulFunctionCall","src":"1170:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1158:3:1"},"nodeType":"YulFunctionCall","src":"1158:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1140:6:1"},"nodeType":"YulFunctionCall","src":"1140:51:1"},"nodeType":"YulExpressionStatement","src":"1140:51:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1211:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1222:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1207:3:1"},"nodeType":"YulFunctionCall","src":"1207:18:1"},{"name":"value1","nodeType":"YulIdentifier","src":"1227:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1200:6:1"},"nodeType":"YulFunctionCall","src":"1200:34:1"},"nodeType":"YulExpressionStatement","src":"1200:34:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1254:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1265:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1250:3:1"},"nodeType":"YulFunctionCall","src":"1250:18:1"},{"name":"value2","nodeType":"YulIdentifier","src":"1270:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1243:6:1"},"nodeType":"YulFunctionCall","src":"1243:34:1"},"nodeType":"YulExpressionStatement","src":"1243:34:1"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1048:9:1","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1059:6:1","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1067:6:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1075:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1086:4:1","type":""}],"src":"938:345:1"},{"body":{"nodeType":"YulBlock","src":"1383:92:1","statements":[{"nodeType":"YulAssignment","src":"1393:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1405:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1416:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1401:3:1"},"nodeType":"YulFunctionCall","src":"1401:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1393:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1435:9:1"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1460:6:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1453:6:1"},"nodeType":"YulFunctionCall","src":"1453:14:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1446:6:1"},"nodeType":"YulFunctionCall","src":"1446:22:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1428:6:1"},"nodeType":"YulFunctionCall","src":"1428:41:1"},"nodeType":"YulExpressionStatement","src":"1428:41:1"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1352:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1363:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1374:4:1","type":""}],"src":"1288:187:1"},{"body":{"nodeType":"YulBlock","src":"1589:76:1","statements":[{"nodeType":"YulAssignment","src":"1599:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1611:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1622:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1607:3:1"},"nodeType":"YulFunctionCall","src":"1607:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1599:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1641:9:1"},{"name":"value0","nodeType":"YulIdentifier","src":"1652:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1634:6:1"},"nodeType":"YulFunctionCall","src":"1634:25:1"},"nodeType":"YulExpressionStatement","src":"1634:25:1"}]},"name":"abi_encode_tuple_t_rational_0_by_1__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1558:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1569:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1580:4:1","type":""}],"src":"1480:185:1"},{"body":{"nodeType":"YulBlock","src":"1779:76:1","statements":[{"nodeType":"YulAssignment","src":"1789:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1801:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1812:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1797:3:1"},"nodeType":"YulFunctionCall","src":"1797:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1789:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1831:9:1"},{"name":"value0","nodeType":"YulIdentifier","src":"1842:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1824:6:1"},"nodeType":"YulFunctionCall","src":"1824:25:1"},"nodeType":"YulExpressionStatement","src":"1824:25:1"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1748:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1759:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1770:4:1","type":""}],"src":"1670:185:1"},{"body":{"nodeType":"YulBlock","src":"2034:228:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2051:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2062:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2044:6:1"},"nodeType":"YulFunctionCall","src":"2044:21:1"},"nodeType":"YulExpressionStatement","src":"2044:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2085:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2096:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2081:3:1"},"nodeType":"YulFunctionCall","src":"2081:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"2101:2:1","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2074:6:1"},"nodeType":"YulFunctionCall","src":"2074:30:1"},"nodeType":"YulExpressionStatement","src":"2074:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2124:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2135:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2120:3:1"},"nodeType":"YulFunctionCall","src":"2120:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"2140:34:1","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2113:6:1"},"nodeType":"YulFunctionCall","src":"2113:62:1"},"nodeType":"YulExpressionStatement","src":"2113:62:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2195:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2206:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2191:3:1"},"nodeType":"YulFunctionCall","src":"2191:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"2211:8:1","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2184:6:1"},"nodeType":"YulFunctionCall","src":"2184:36:1"},"nodeType":"YulExpressionStatement","src":"2184:36:1"},{"nodeType":"YulAssignment","src":"2229:27:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2241:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2252:3:1","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2237:3:1"},"nodeType":"YulFunctionCall","src":"2237:19:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2229:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2011:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2025:4:1","type":""}],"src":"1860:402:1"},{"body":{"nodeType":"YulBlock","src":"2441:177:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2458:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2469:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2451:6:1"},"nodeType":"YulFunctionCall","src":"2451:21:1"},"nodeType":"YulExpressionStatement","src":"2451:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2492:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2503:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2488:3:1"},"nodeType":"YulFunctionCall","src":"2488:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"2508:2:1","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2481:6:1"},"nodeType":"YulFunctionCall","src":"2481:30:1"},"nodeType":"YulExpressionStatement","src":"2481:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2531:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2542:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2527:3:1"},"nodeType":"YulFunctionCall","src":"2527:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"2547:29:1","type":"","value":"SafeMath: addition overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2520:6:1"},"nodeType":"YulFunctionCall","src":"2520:57:1"},"nodeType":"YulExpressionStatement","src":"2520:57:1"},{"nodeType":"YulAssignment","src":"2586:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2598:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2609:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2594:3:1"},"nodeType":"YulFunctionCall","src":"2594:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2586:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2418:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2432:4:1","type":""}],"src":"2267:351:1"},{"body":{"nodeType":"YulBlock","src":"2797:170:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2814:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2825:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2807:6:1"},"nodeType":"YulFunctionCall","src":"2807:21:1"},"nodeType":"YulExpressionStatement","src":"2807:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2848:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2859:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2844:3:1"},"nodeType":"YulFunctionCall","src":"2844:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"2864:2:1","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2837:6:1"},"nodeType":"YulFunctionCall","src":"2837:30:1"},"nodeType":"YulExpressionStatement","src":"2837:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2887:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2898:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2883:3:1"},"nodeType":"YulFunctionCall","src":"2883:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"2903:22:1","type":"","value":"Failed to send Ether"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2876:6:1"},"nodeType":"YulFunctionCall","src":"2876:50:1"},"nodeType":"YulExpressionStatement","src":"2876:50:1"},{"nodeType":"YulAssignment","src":"2935:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2947:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2958:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2943:3:1"},"nodeType":"YulFunctionCall","src":"2943:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2935:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2774:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2788:4:1","type":""}],"src":"2623:344:1"},{"body":{"nodeType":"YulBlock","src":"3146:170:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3163:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3174:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3156:6:1"},"nodeType":"YulFunctionCall","src":"3156:21:1"},"nodeType":"YulExpressionStatement","src":"3156:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3197:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3208:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3193:3:1"},"nodeType":"YulFunctionCall","src":"3193:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"3213:2:1","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3186:6:1"},"nodeType":"YulFunctionCall","src":"3186:30:1"},"nodeType":"YulExpressionStatement","src":"3186:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3236:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3247:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3232:3:1"},"nodeType":"YulFunctionCall","src":"3232:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"3252:22:1","type":"","value":"No funds to withdraw"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3225:6:1"},"nodeType":"YulFunctionCall","src":"3225:50:1"},"nodeType":"YulExpressionStatement","src":"3225:50:1"},{"nodeType":"YulAssignment","src":"3284:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3296:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3307:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3292:3:1"},"nodeType":"YulFunctionCall","src":"3292:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3284:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3123:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3137:4:1","type":""}],"src":"2972:344:1"},{"body":{"nodeType":"YulBlock","src":"3495:180:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3512:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3523:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3505:6:1"},"nodeType":"YulFunctionCall","src":"3505:21:1"},"nodeType":"YulExpressionStatement","src":"3505:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3546:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3557:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3542:3:1"},"nodeType":"YulFunctionCall","src":"3542:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"3562:2:1","type":"","value":"30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3535:6:1"},"nodeType":"YulFunctionCall","src":"3535:30:1"},"nodeType":"YulExpressionStatement","src":"3535:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3585:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3596:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3581:3:1"},"nodeType":"YulFunctionCall","src":"3581:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"3601:32:1","type":"","value":"SafeMath: subtraction overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3574:6:1"},"nodeType":"YulFunctionCall","src":"3574:60:1"},"nodeType":"YulExpressionStatement","src":"3574:60:1"},{"nodeType":"YulAssignment","src":"3643:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3655:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3666:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3651:3:1"},"nodeType":"YulFunctionCall","src":"3651:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3643:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3472:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3486:4:1","type":""}],"src":"3321:354:1"},{"body":{"nodeType":"YulBlock","src":"3854:223:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3871:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3882:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3864:6:1"},"nodeType":"YulFunctionCall","src":"3864:21:1"},"nodeType":"YulExpressionStatement","src":"3864:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3905:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3916:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3901:3:1"},"nodeType":"YulFunctionCall","src":"3901:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"3921:2:1","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3894:6:1"},"nodeType":"YulFunctionCall","src":"3894:30:1"},"nodeType":"YulExpressionStatement","src":"3894:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3944:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3955:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3940:3:1"},"nodeType":"YulFunctionCall","src":"3940:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"3960:34:1","type":"","value":"SafeMath: multiplication overflo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3933:6:1"},"nodeType":"YulFunctionCall","src":"3933:62:1"},"nodeType":"YulExpressionStatement","src":"3933:62:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4015:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4026:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4011:3:1"},"nodeType":"YulFunctionCall","src":"4011:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"4031:3:1","type":"","value":"w"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4004:6:1"},"nodeType":"YulFunctionCall","src":"4004:31:1"},"nodeType":"YulExpressionStatement","src":"4004:31:1"},{"nodeType":"YulAssignment","src":"4044:27:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4056:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4067:3:1","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4052:3:1"},"nodeType":"YulFunctionCall","src":"4052:19:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4044:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3831:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3845:4:1","type":""}],"src":"3680:397:1"},{"body":{"nodeType":"YulBlock","src":"4256:182:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4273:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4284:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4266:6:1"},"nodeType":"YulFunctionCall","src":"4266:21:1"},"nodeType":"YulExpressionStatement","src":"4266:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4307:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4318:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4303:3:1"},"nodeType":"YulFunctionCall","src":"4303:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"4323:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4296:6:1"},"nodeType":"YulFunctionCall","src":"4296:30:1"},"nodeType":"YulExpressionStatement","src":"4296:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4346:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4357:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4342:3:1"},"nodeType":"YulFunctionCall","src":"4342:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"4362:34:1","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4335:6:1"},"nodeType":"YulFunctionCall","src":"4335:62:1"},"nodeType":"YulExpressionStatement","src":"4335:62:1"},{"nodeType":"YulAssignment","src":"4406:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4418:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4429:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4414:3:1"},"nodeType":"YulFunctionCall","src":"4414:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4406:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4233:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4247:4:1","type":""}],"src":"4082:356:1"},{"body":{"nodeType":"YulBlock","src":"4617:176:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4634:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4645:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4627:6:1"},"nodeType":"YulFunctionCall","src":"4627:21:1"},"nodeType":"YulExpressionStatement","src":"4627:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4668:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4679:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4664:3:1"},"nodeType":"YulFunctionCall","src":"4664:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"4684:2:1","type":"","value":"26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4657:6:1"},"nodeType":"YulFunctionCall","src":"4657:30:1"},"nodeType":"YulExpressionStatement","src":"4657:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4707:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4718:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4703:3:1"},"nodeType":"YulFunctionCall","src":"4703:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"4723:28:1","type":"","value":"We don't have enough funds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4696:6:1"},"nodeType":"YulFunctionCall","src":"4696:56:1"},"nodeType":"YulExpressionStatement","src":"4696:56:1"},{"nodeType":"YulAssignment","src":"4761:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4773:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4784:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4769:3:1"},"nodeType":"YulFunctionCall","src":"4769:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4761:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_a6e93ec281220a68512a2e3176b4a5c72e33af61f39082eda06712ffff289086__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4594:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4608:4:1","type":""}],"src":"4443:350:1"},{"body":{"nodeType":"YulBlock","src":"4899:76:1","statements":[{"nodeType":"YulAssignment","src":"4909:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4921:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"4932:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4917:3:1"},"nodeType":"YulFunctionCall","src":"4917:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4909:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4951:9:1"},{"name":"value0","nodeType":"YulIdentifier","src":"4962:6:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4944:6:1"},"nodeType":"YulFunctionCall","src":"4944:25:1"},"nodeType":"YulExpressionStatement","src":"4944:25:1"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4868:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4879:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4890:4:1","type":""}],"src":"4798:177:1"},{"body":{"nodeType":"YulBlock","src":"5028:80:1","statements":[{"body":{"nodeType":"YulBlock","src":"5055:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5057:16:1"},"nodeType":"YulFunctionCall","src":"5057:18:1"},"nodeType":"YulExpressionStatement","src":"5057:18:1"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5044:1:1"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5051:1:1"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5047:3:1"},"nodeType":"YulFunctionCall","src":"5047:6:1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5041:2:1"},"nodeType":"YulFunctionCall","src":"5041:13:1"},"nodeType":"YulIf","src":"5038:2:1"},{"nodeType":"YulAssignment","src":"5086:16:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5097:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"5100:1:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5093:3:1"},"nodeType":"YulFunctionCall","src":"5093:9:1"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5086:3:1"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5011:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"5014:1:1","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5020:3:1","type":""}],"src":"4980:128:1"},{"body":{"nodeType":"YulBlock","src":"5159:74:1","statements":[{"body":{"nodeType":"YulBlock","src":"5182:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"5184:16:1"},"nodeType":"YulFunctionCall","src":"5184:18:1"},"nodeType":"YulExpressionStatement","src":"5184:18:1"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5179:1:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5172:6:1"},"nodeType":"YulFunctionCall","src":"5172:9:1"},"nodeType":"YulIf","src":"5169:2:1"},{"nodeType":"YulAssignment","src":"5213:14:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5222:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"5225:1:1"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5218:3:1"},"nodeType":"YulFunctionCall","src":"5218:9:1"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5213:1:1"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5144:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"5147:1:1","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"5153:1:1","type":""}],"src":"5113:120:1"},{"body":{"nodeType":"YulBlock","src":"5290:116:1","statements":[{"body":{"nodeType":"YulBlock","src":"5349:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5351:16:1"},"nodeType":"YulFunctionCall","src":"5351:18:1"},"nodeType":"YulExpressionStatement","src":"5351:18:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5321:1:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5314:6:1"},"nodeType":"YulFunctionCall","src":"5314:9:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5307:6:1"},"nodeType":"YulFunctionCall","src":"5307:17:1"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5329:1:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5340:1:1","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5336:3:1"},"nodeType":"YulFunctionCall","src":"5336:6:1"},{"name":"x","nodeType":"YulIdentifier","src":"5344:1:1"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5332:3:1"},"nodeType":"YulFunctionCall","src":"5332:14:1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5326:2:1"},"nodeType":"YulFunctionCall","src":"5326:21:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5303:3:1"},"nodeType":"YulFunctionCall","src":"5303:45:1"},"nodeType":"YulIf","src":"5300:2:1"},{"nodeType":"YulAssignment","src":"5380:20:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5395:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"5398:1:1"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5391:3:1"},"nodeType":"YulFunctionCall","src":"5391:9:1"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"5380:7:1"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5269:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"5272:1:1","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"5278:7:1","type":""}],"src":"5238:168:1"},{"body":{"nodeType":"YulBlock","src":"5460:76:1","statements":[{"body":{"nodeType":"YulBlock","src":"5482:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5484:16:1"},"nodeType":"YulFunctionCall","src":"5484:18:1"},"nodeType":"YulExpressionStatement","src":"5484:18:1"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5476:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"5479:1:1"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5473:2:1"},"nodeType":"YulFunctionCall","src":"5473:8:1"},"nodeType":"YulIf","src":"5470:2:1"},{"nodeType":"YulAssignment","src":"5513:17:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5525:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"5528:1:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5521:3:1"},"nodeType":"YulFunctionCall","src":"5521:9:1"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"5513:4:1"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5442:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"5445:1:1","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"5451:4:1","type":""}],"src":"5411:125:1"},{"body":{"nodeType":"YulBlock","src":"5579:74:1","statements":[{"body":{"nodeType":"YulBlock","src":"5602:22:1","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"5604:16:1"},"nodeType":"YulFunctionCall","src":"5604:18:1"},"nodeType":"YulExpressionStatement","src":"5604:18:1"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5599:1:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5592:6:1"},"nodeType":"YulFunctionCall","src":"5592:9:1"},"nodeType":"YulIf","src":"5589:2:1"},{"nodeType":"YulAssignment","src":"5633:14:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5642:1:1"},{"name":"y","nodeType":"YulIdentifier","src":"5645:1:1"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"5638:3:1"},"nodeType":"YulFunctionCall","src":"5638:9:1"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5633:1:1"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5564:1:1","type":""},{"name":"y","nodeType":"YulTypedName","src":"5567:1:1","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"5573:1:1","type":""}],"src":"5541:112:1"},{"body":{"nodeType":"YulBlock","src":"5690:95:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5707:1:1","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5714:3:1","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5719:10:1","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5710:3:1"},"nodeType":"YulFunctionCall","src":"5710:20:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5700:6:1"},"nodeType":"YulFunctionCall","src":"5700:31:1"},"nodeType":"YulExpressionStatement","src":"5700:31:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5747:1:1","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5750:4:1","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5740:6:1"},"nodeType":"YulFunctionCall","src":"5740:15:1"},"nodeType":"YulExpressionStatement","src":"5740:15:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5771:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5774:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5764:6:1"},"nodeType":"YulFunctionCall","src":"5764:15:1"},"nodeType":"YulExpressionStatement","src":"5764:15:1"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"5658:127:1"},{"body":{"nodeType":"YulBlock","src":"5822:95:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5839:1:1","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5846:3:1","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5851:10:1","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5842:3:1"},"nodeType":"YulFunctionCall","src":"5842:20:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5832:6:1"},"nodeType":"YulFunctionCall","src":"5832:31:1"},"nodeType":"YulExpressionStatement","src":"5832:31:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5879:1:1","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5882:4:1","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5872:6:1"},"nodeType":"YulFunctionCall","src":"5872:15:1"},"nodeType":"YulExpressionStatement","src":"5872:15:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5903:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5906:4:1","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5896:6:1"},"nodeType":"YulFunctionCall","src":"5896:15:1"},"nodeType":"YulExpressionStatement","src":"5896:15:1"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"5790:127:1"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_rational_0_by_1__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"SafeMath: addition overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Failed to send Ether\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"No funds to withdraw\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"SafeMath: subtraction overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"SafeMath: multiplication overflo\")\n        mstore(add(headStart, 96), \"w\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a6e93ec281220a68512a2e3176b4a5c72e33af61f39082eda06712ffff289086__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"We don't have enough funds\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n}","id":1,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100dd5760003560e01c80638da5cb5b1161007f578063bd097e2111610059578063bd097e2114610208578063e437786d14610210578063f2fde38b1461027c578063fe96973a1461029c57600080fd5b80638da5cb5b146101c3578063a5ce8496146101eb578063b3e25412146101f357600080fd5b8063741c0a0f116100bb578063741c0a0f1461014c578063853828b61461016e578063876c0d59146101835780638b7afe2e146101ad57600080fd5b8063221e885d146100e2578063252f4d81146100f7578063715018a614610137575b600080fd5b6100f56100f03660046109fc565b6102bc565b005b34801561010357600080fd5b506101246101123660046109d5565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561014357600080fd5b506100f5610442565b34801561015857600080fd5b5033600090815260016020526040902054610124565b34801561017a57600080fd5b506100f56104b6565b34801561018f57600080fd5b5060065461019d9060ff1681565b604051901515815260200161012e565b3480156101b957600080fd5b5061012460055481565b3480156101cf57600080fd5b506000546040516001600160a01b03909116815260200161012e565b6100f561051c565b3480156101ff57600080fd5b506100f5610572565b6100f561063f565b34801561021c57600080fd5b5061025761022b3660046109d5565b60026020819052600091825260409091208054600182015491909201546001600160a01b039092169183565b604080516001600160a01b03909416845260208401929092529082015260600161012e565b34801561028857600080fd5b506100f56102973660046109d5565b61067a565b3480156102a857600080fd5b506100f56102b73660046109fc565b6106b0565b34600554116103125760405162461bcd60e51b815260206004820152601a60248201527f576520646f6e2774206861766520656e6f7567682066756e647300000000000060448201526064015b60405180910390fd5b60408051606081018252338082523460208301529181018390526000610336610774565b905081604001518114156103ea57604051600181527f8dd156d70678f56c23b7158d46721d0f9dc9873d9956eab396dbf665b156c4df9060200160405180910390a1600061039361038c846020015160026107c8565b6000610850565b90506103a56005548460200151610850565b6005556001600160a01b0384166000908152600160205260409020546103cb90826108b6565b6001600160a01b0385166000908152600160205260409020555061043c565b604051600081527f8dd156d70678f56c23b7158d46721d0f9dc9873d9956eab396dbf665b156c4df9060200160405180910390a161043860055461043384602001516000610850565b6108b6565b6005555b50505050565b6000546001600160a01b0316331461046c5760405162461bcd60e51b815260040161030990610a14565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146104e05760405162461bcd60e51b815260040161030990610a14565b600580546000918290556040519091339183156108fc0291849190818181858888f19350505050158015610518573d6000803e3d6000fd5b5050565b6000546001600160a01b031633146105465760405162461bcd60e51b815260040161030990610a14565b3360009081526001602052604090205461056090346108b6565b33600090815260016020526040902055565b336000908152600160205260409020546105c55760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b6044820152606401610309565b33600081815260016020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015610606573d6000803e3d6000fd5b5060405181815233907f42b2a4ad2d4bdf57e819ccd3c6ce6d0a8d6d20b5d3dbf94ef2b05c42f523c6109060200160405180910390a250565b6000546001600160a01b031633146106695760405162461bcd60e51b815260040161030990610a14565b610675600554346108b6565b600555565b6000546001600160a01b031633146106a45760405162461bcd60e51b815260040161030990610a14565b6106ad81610915565b50565b6000546001600160a01b031633146106da5760405162461bcd60e51b815260040161030990610a14565b600080546040516001600160a01b039091169083908381818185875af1925050503d8060008114610727576040519150601f19603f3d011682016040523d82523d6000602084013e61072c565b606091505b50509050806105185760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610309565b600080610782436001610850565b6003549040915081141561079557600080fd5b600381905560006107a7600283610aab565b90506000816001146107ba5760006107bd565b60015b60ff16949350505050565b6000826107d75750600061084a565b60006107e38385610a75565b9050826107f08583610a61565b146108475760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610309565b90505b92915050565b6000828211156108a25760405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401610309565b60006108ae8385610a94565b949350505050565b6000806108c38385610a49565b9050838110156108475760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610309565b6001600160a01b03811661097a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610309565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000602082840312156109e6578081fd5b81356001600160a01b0381168114610847578182fd5b600060208284031215610a0d578081fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610a5c57610a5c610abf565b500190565b600082610a7057610a70610ad5565b500490565b6000816000190483118215151615610a8f57610a8f610abf565b500290565b600082821015610aa657610aa6610abf565b500390565b600082610aba57610aba610ad5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212209b38839cd7118600145494489ff7956599255888bbe82796b04dfc78282766d664736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xBD097E21 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xBD097E21 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0xE437786D EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0xFE96973A EQ PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xA5CE8496 EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0xB3E25412 EQ PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x741C0A0F GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x741C0A0F EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x853828B6 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x876C0D59 EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x8B7AFE2E EQ PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x221E885D EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x252F4D81 EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x137 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF5 PUSH2 0xF0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x124 PUSH2 0x112 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x442 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x124 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x4B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x19D SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x124 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12E JUMP JUMPDEST PUSH2 0xF5 PUSH2 0x51C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x572 JUMP JUMPDEST PUSH2 0xF5 PUSH2 0x63F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x257 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0x9D5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x12E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D5 JUMP JUMPDEST PUSH2 0x67A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x6B0 JUMP JUMPDEST CALLVALUE PUSH1 0x5 SLOAD GT PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x576520646F6E2774206861766520656E6F7567682066756E6473000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE CALLER DUP1 DUP3 MSTORE CALLVALUE PUSH1 0x20 DUP4 ADD MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 PUSH2 0x336 PUSH2 0x774 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD DUP2 EQ ISZERO PUSH2 0x3EA JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x8DD156D70678F56C23B7158D46721D0F9DC9873D9956EAB396DBF665B156C4DF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0x393 PUSH2 0x38C DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x2 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x850 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A5 PUSH1 0x5 SLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x850 JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3CB SWAP1 DUP3 PUSH2 0x8B6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH32 0x8DD156D70678F56C23B7158D46721D0F9DC9873D9956EAB396DBF665B156C4DF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x438 PUSH1 0x5 SLOAD PUSH2 0x433 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x0 PUSH2 0x850 JUMP JUMPDEST PUSH2 0x8B6 JUMP JUMPDEST PUSH1 0x5 SSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x46C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 CALLER SWAP2 DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 DUP5 SWAP2 SWAP1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x518 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x546 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x560 SWAP1 CALLVALUE PUSH2 0x8B6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x5C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x4E6F2066756E647320746F207769746864726177 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE SWAP1 MLOAD SWAP1 SWAP3 SWAP2 DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x606 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE CALLER SWAP1 PUSH32 0x42B2A4AD2D4BDF57E819CCD3C6CE6D0A8D6D20B5D3DBF94EF2B05C42F523C610 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x669 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x675 PUSH1 0x5 SLOAD CALLVALUE PUSH2 0x8B6 JUMP JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x6AD DUP2 PUSH2 0x915 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x309 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x727 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x72C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x518 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x782 NUMBER PUSH1 0x1 PUSH2 0x850 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 BLOCKHASH SWAP2 POP DUP2 EQ ISZERO PUSH2 0x795 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x0 PUSH2 0x7A7 PUSH1 0x2 DUP4 PUSH2 0xAAB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 EQ PUSH2 0x7BA JUMPI PUSH1 0x0 PUSH2 0x7BD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x7D7 JUMPI POP PUSH1 0x0 PUSH2 0x84A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E3 DUP4 DUP6 PUSH2 0xA75 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x7F0 DUP6 DUP4 PUSH2 0xA61 JUMP JUMPDEST EQ PUSH2 0x847 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206D756C7469706C69636174696F6E206F766572666C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x8A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AE DUP4 DUP6 PUSH2 0xA94 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x8C3 DUP4 DUP6 PUSH2 0xA49 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x847 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x97A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x847 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA0D JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xA5C JUMPI PUSH2 0xA5C PUSH2 0xABF JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA70 JUMPI PUSH2 0xA70 PUSH2 0xAD5 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xA8F JUMPI PUSH2 0xA8F PUSH2 0xABF JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xAA6 JUMPI PUSH2 0xAA6 PUSH2 0xABF JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xABA JUMPI PUSH2 0xABA PUSH2 0xAD5 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP12 CODESIZE DUP4 SWAP13 0xD7 GT DUP7 STOP EQ SLOAD SWAP5 0x48 SWAP16 0xF7 SWAP6 PUSH6 0x99255888BBE8 0x27 SWAP7 0xB0 0x4D 0xFC PUSH25 0x282766D664736F6C6343000804003300000000000000000000 ","sourceMap":"5360:4032:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7078:1078;;;;;;:::i;:::-;;:::i;:::-;;5546:49;;;;;;;;;;-1:-1:-1;5546:49:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1634:25:1;;;1622:2;1607:18;5546:49:0;;;;;;;;4822:140;;;;;;;;;;;;;:::i;8494:109::-;;;;;;;;;;-1:-1:-1;8584:10:0;8545:4;8569:26;;;:14;:26;;;;;;8494:109;;9041:173;;;;;;;;;;;;;:::i;5978:31::-;;;;;;;;;;-1:-1:-1;5978:31:0;;;;;;;;;;;1453:14:1;;1446:22;1428:41;;1416:2;1401:18;5978:31:0;1383:92:1;5942:27:0;;;;;;;;;;;;;;;;4608:79;;;;;;;;;;-1:-1:-1;4646:7:0;4673:6;4608:79;;-1:-1:-1;;;;;4673:6:0;;;876:51:1;;864:2;849:18;4608:79:0;831:102:1;8848:185:0;;;:::i;8164:322::-;;;;;;;;;;;;;:::i;8714:126::-;;;:::i;5602:38::-;;;;;;;;;;-1:-1:-1;5602:38:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5602:38:0;;;;;;;;;;-1:-1:-1;;;;;1158:32:1;;;1140:51;;1222:2;1207:18;;1200:34;;;;1250:18;;;1243:34;1128:2;1113:18;5602:38:0;1095:188:1;4970:109:0;;;;;;;;;;-1:-1:-1;4970:109:0;;;;;:::i;:::-;;:::i;9222:167::-;;;;;;;;;;-1:-1:-1;9222:167:0;;;;;:::i;:::-;;:::i;7078:1078::-;7161:9;7143:15;;:27;7135:66;;;;-1:-1:-1;;;7135:66:0;;4645:2:1;7135:66:0;;;4627:21:1;4684:2;4664:18;;;4657:30;4723:28;4703:18;;;4696:56;4769:18;;7135:66:0;;;;;;;;;-1:-1:-1;;;;;;;;7232:10:0;7282:34;;;7346:9;-1:-1:-1;;;7327:28:0;-1:-1:-1;;;7366:28:0;;;-1:-1:-1;7425:11:0;:9;:11::i;:::-;7407:29;;7467:7;:18;;;7453:10;:32;7449:700;;;7529:14;;7541:1;1634:25:1;;7529:14:0;;1622:2:1;1607:18;7529:14:0;;;;;;;7558;7575:50;7588:33;7601:7;:16;;;7619:1;7588:12;:33::i;:::-;7623:1;7575:12;:50::i;:::-;7558:67;;7658:47;7671:15;;7688:7;:16;;;7658:12;:47::i;:::-;7640:15;:65;-1:-1:-1;;;;;7777:23:0;;;;;;:14;:23;;;;;;7746:97;;7819:9;7746:12;:97::i;:::-;-1:-1:-1;;;;;7720:23:0;;;;;;:14;:23;;;;;:123;-1:-1:-1;7449:700:0;;;7902:14;;7914:1;1634:25:1;;7902:14:0;;1622:2:1;1607:18;7902:14:0;;;;;;;7949:188;7980:15;;8089:33;8102:7;:16;;;8120:1;8089:12;:33::i;:::-;7949:12;:188::i;:::-;7931:15;:206;7449:700;7078:1078;;;;:::o;4822:140::-;4735:6;;-1:-1:-1;;;;;4735:6:0;4006:10;4735:22;4727:67;;;;-1:-1:-1;;;4727:67:0;;;;;;;:::i;:::-;4921:1:::1;4905:6:::0;;4884:40:::1;::::0;-1:-1:-1;;;;;4905:6:0;;::::1;::::0;4884:40:::1;::::0;4921:1;;4884:40:::1;4952:1;4935:19:::0;;-1:-1:-1;;;;;;4935:19:0::1;::::0;;4822:140::o;9041:173::-;4735:6;;-1:-1:-1;;;;;4735:6:0;4006:10;4735:22;4727:67;;;;-1:-1:-1;;;4727:67:0;;;;;;;:::i;:::-;9110:15:::1;::::0;;9092::::1;9136:19:::0;;;;9166:40:::1;::::0;9110:15;;9174:10:::1;::::0;9166:40;::::1;;;::::0;9110:15;;9166:40;;9092:15;9166:40;9110:15;9174:10;9166:40;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;4805:1;9041:173::o:0;8848:185::-;4735:6;;-1:-1:-1;;;;;4735:6:0;4006:10;4735:22;4727:67;;;;-1:-1:-1;;;4727:67:0;;;;;;;:::i;:::-;8979:10:::1;8964:26;::::0;;;:14:::1;:26;::::0;;;;;8937:88:::1;::::0;9005:9:::1;8937:12;:88::i;:::-;8923:10;8908:26;::::0;;;:14:::1;:26;::::0;;;;:117;8848:185::o;8164:322::-;8237:10;8251:1;8222:26;;;:14;:26;;;;;;8214:63;;;;-1:-1:-1;;;8214:63:0;;3174:2:1;8214:63:0;;;3156:21:1;3213:2;3193:18;;;3186:30;-1:-1:-1;;;3232:18:1;;;3225:50;3292:18;;8214:63:0;3146:170:1;8214:63:0;8321:10;8288:15;8306:26;;;:14;:26;;;;;;;;8343:30;;;;8384:40;;8306:26;;8321:10;8384:40;;;;;8306:26;;8384:40;8288:15;8384:40;8306:26;8321:10;8384:40;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8440:38:0;;1634:25:1;;;8455:10:0;;8440:38;;1622:2:1;1607:18;8440:38:0;;;;;;;8164:322;:::o;8714:126::-;4735:6;;-1:-1:-1;;;;;4735:6:0;4006:10;4735:22;4727:67;;;;-1:-1:-1;;;4727:67:0;;;;;;;:::i;:::-;8792:40:::1;8805:15;;8822:9;8792:12;:40::i;:::-;8774:15;:58:::0;8714:126::o;4970:109::-;4735:6;;-1:-1:-1;;;;;4735:6:0;4006:10;4735:22;4727:67;;;;-1:-1:-1;;;4727:67:0;;;;;;;:::i;:::-;5043:28:::1;5062:8;5043:18;:28::i;:::-;4970:109:::0;:::o;9222:167::-;4735:6;;-1:-1:-1;;;;;4735:6:0;4006:10;4735:22;4727:67;;;;-1:-1:-1;;;4727:67:0;;;;;;;:::i;:::-;9287:9:::1;4673:6:::0;;9302:31:::1;::::0;-1:-1:-1;;;;;4673:6:0;;;;9322;;9287:9;9302:31;9287:9;9302:31;9322:6;4673;9302:31:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9286:47;;;9352:4;9344:37;;;::::0;-1:-1:-1;;;9344:37:0;;2825:2:1;9344:37:0::1;::::0;::::1;2807:21:1::0;2864:2;2844:18;;;2837:30;-1:-1:-1;;;2883:18:1;;;2876:50;2943:18;;9344:37:0::1;2797:170:1::0;6042:342:0;6080:4;;6136:19;:12;6153:1;6136:16;:19::i;:::-;6174:8;;6126:30;;;-1:-1:-1;6174:22:0;;6170:63;;;6213:8;;;6170:63;6245:8;:21;;;6277:16;6296:14;6309:1;6256:10;6296:14;:::i;:::-;6277:33;;6321:9;6333:8;6345:1;6333:13;:21;;6353:1;6333:21;;;6349:1;6333:21;6321:33;;;6042:342;-1:-1:-1;;;;6042:342:0:o;1825:470::-;1883:7;2127:6;2123:47;;-1:-1:-1;2157:1:0;2150:8;;2123:47;2182:9;2194:5;2198:1;2194;:5;:::i;:::-;2182:17;-1:-1:-1;2227:1:0;2218:5;2222:1;2182:17;2218:5;:::i;:::-;:10;2210:56;;;;-1:-1:-1;;;2210:56:0;;3882:2:1;2210:56:0;;;3864:21:1;3921:2;3901:18;;;3894:30;3960:34;3940:18;;;3933:62;-1:-1:-1;;;4011:18:1;;;4004:31;4052:19;;2210:56:0;3854:223:1;2210:56:0;2286:1;-1:-1:-1;1825:470:0;;;;;:::o;1390:184::-;1448:7;1481:1;1476;:6;;1468:49;;;;-1:-1:-1;;;1468:49:0;;3523:2:1;1468:49:0;;;3505:21:1;3562:2;3542:18;;;3535:30;3601:32;3581:18;;;3574:60;3651:18;;1468:49:0;3495:180:1;1468:49:0;1528:9;1540:5;1544:1;1540;:5;:::i;:::-;1528:17;1390:184;-1:-1:-1;;;;1390:184:0:o;934:181::-;992:7;;1024:5;1028:1;1024;:5;:::i;:::-;1012:17;;1053:1;1048;:6;;1040:46;;;;-1:-1:-1;;;1040:46:0;;2469:2:1;1040:46:0;;;2451:21:1;2508:2;2488:18;;;2481:30;2547:29;2527:18;;;2520:57;2594:18;;1040:46:0;2441:177:1;5087:266:0;-1:-1:-1;;;;;5175:22:0;;5153:110;;;;-1:-1:-1;;;5153:110:0;;2062:2:1;5153:110:0;;;2044:21:1;2101:2;2081:18;;;2074:30;2140:34;2120:18;;;2113:62;-1:-1:-1;;;2191:18:1;;;2184:36;2237:19;;5153:110:0;2034:228:1;5153:110:0;5300:6;;;5279:38;;-1:-1:-1;;;;;5279:38:0;;;;5300:6;;;5279:38;;;5328:6;:17;;-1:-1:-1;;;;;;5328:17:0;-1:-1:-1;;;;;5328:17:0;;;;;;;;;;5087:266::o;14:306:1:-;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;178:23;;-1:-1:-1;;;;;230:31:1;;220:42;;210:2;;281:6;273;266:22;325:190;384:6;437:2;425:9;416:7;412:23;408:32;405:2;;;458:6;450;443:22;405:2;-1:-1:-1;486:23:1;;395:120;-1:-1:-1;395:120:1:o;4082:356::-;4284:2;4266:21;;;4303:18;;;4296:30;4362:34;4357:2;4342:18;;4335:62;4429:2;4414:18;;4256:182::o;4980:128::-;5020:3;5051:1;5047:6;5044:1;5041:13;5038:2;;;5057:18;;:::i;:::-;-1:-1:-1;5093:9:1;;5028:80::o;5113:120::-;5153:1;5179;5169:2;;5184:18;;:::i;:::-;-1:-1:-1;5218:9:1;;5159:74::o;5238:168::-;5278:7;5344:1;5340;5336:6;5332:14;5329:1;5326:21;5321:1;5314:9;5307:17;5303:45;5300:2;;;5351:18;;:::i;:::-;-1:-1:-1;5391:9:1;;5290:116::o;5411:125::-;5451:4;5479:1;5476;5473:8;5470:2;;;5484:18;;:::i;:::-;-1:-1:-1;5521:9:1;;5460:76::o;5541:112::-;5573:1;5599;5589:2;;5604:18;;:::i;:::-;-1:-1:-1;5638:9:1;;5579:74::o;5658:127::-;5719:10;5714:3;5710:20;5707:1;5700:31;5750:4;5747:1;5740:15;5774:4;5771:1;5764:15;5790:127;5851:10;5846:3;5842:20;5839:1;5832:31;5882:4;5879:1;5872:15;5906:4;5903:1;5896:15"},"gasEstimates":{"creation":{"codeDepositCost":"569800","executionCost":"63815","totalCost":"633615"},"external":{"claimETH(uint256)":"infinite","contractBalance()":"1073","flip(uint256)":"infinite","freeCallback()":"1077","fundContract()":"21937","fundWinnings()":"22099","getWinningsBalance()":"1072","owner()":"1024","playerWinnings(address)":"1223","renounceOwnership()":"24233","transferOwnership(address)":"24464","waiting(address)":"2955","withdrawAll()":"infinite","withdrawUserWinnings()":"infinite"},"internal":{"getResult()":"infinite"}},"methodIdentifiers":{"claimETH(uint256)":"fe96973a","contractBalance()":"8b7afe2e","flip(uint256)":"221e885d","freeCallback()":"876c0d59","fundContract()":"bd097e21","fundWinnings()":"a5ce8496","getWinningsBalance()":"741c0a0f","owner()":"8da5cb5b","playerWinnings(address)":"252f4d81","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b","waiting(address)":"e437786d","withdrawAll()":"853828b6","withdrawUserWinnings()":"b3e25412"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"filpFinshed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"logNewProvableQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"userWithdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oneZero\",\"type\":\"uint256\"}],\"name\":\"flip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundWinnings\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinningsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"waiting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"headsTails\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUserWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"flip(uint256)\":{\"details\":\"The function first checks if this is the very first call to the Provable oracle in order     for the user to not pay for the first free call. This also adds user values to two different     mappings: 'waiting' and 'afterWaiting.' Both mappings are necessary in order to bridge the     user's address (which we has access to here with msg.sender) and the user's queryId sent from     Provable after the function call.\",\"params\":{\"oneZero\":\"- The numerical value of heads(0) or tails(1)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"flip(uint256)\":{\"notice\":\"This function simulates a coin flip which makes a call to the Provable oracle for        a random number.\"},\"fundContract()\":{\"notice\":\"The following functions are reserved for the owner of the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Coinflip.sol\":\"Coinflip\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Coinflip.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Coinflip is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Bet {\\r\\n        address playerAddress;\\r\\n        uint256 betValue;\\r\\n        uint256 headsTails;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) public playerWinnings;\\r\\n    mapping(address => Bet) public waiting;\\r\\n\\r\\n    event logNewProvableQuery(string description);\\r\\n    event userWithdrawal(address indexed caller, uint256 amount);\\r\\n    event filpFinshed(uint result);\\r\\n\\r\\n    uint256 lastHash;\\r\\n    uint256 FACTOR =\\r\\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\\r\\n\\r\\n    uint public contractBalance;\\r\\n\\r\\n    bool public freeCallback = true;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getResult() private returns (uint) {\\r\\n        uint256 blockValue = uint256(blockhash(block.number.sub(1)));\\r\\n\\r\\n        if (lastHash == blockValue) {\\r\\n            revert();\\r\\n        }\\r\\n\\r\\n        lastHash = blockValue;\\r\\n        uint256 coinFlip = blockValue % 2;\\r\\n        uint side = coinFlip == 1 ? 1 : 0;\\r\\n        return side;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *@notice This function simulates a coin flip which makes a call to the Provable oracle for\\r\\n     *        a random number.\\r\\n     *@dev The function first checks if this is the very first call to the Provable oracle in order\\r\\n     *     for the user to not pay for the first free call. This also adds user values to two different\\r\\n     *     mappings: 'waiting' and 'afterWaiting.' Both mappings are necessary in order to bridge the\\r\\n     *     user's address (which we has access to here with msg.sender) and the user's queryId sent from\\r\\n     *     Provable after the function call.\\r\\n     *\\r\\n     *@param oneZero - The numerical value of heads(0) or tails(1)\\r\\n     */\\r\\n\\r\\n    function flip(uint256 oneZero) public payable {\\r\\n        require(contractBalance > msg.value, \\\"We don't have enough funds\\\");\\r\\n\\r\\n        address _player = msg.sender;\\r\\n        Bet memory postBet;\\r\\n        postBet.playerAddress = msg.sender;\\r\\n        postBet.betValue = msg.value;\\r\\n        postBet.headsTails = oneZero;\\r\\n\\r\\n        uint flipResult = getResult();\\r\\n\\r\\n        if (flipResult == postBet.headsTails) {\\r\\n            //winner\\r\\n            emit filpFinshed(1);\\r\\n            uint winAmount = SafeMath.sub(SafeMath.mul(postBet.betValue, 2), 0);\\r\\n            contractBalance = SafeMath.sub(contractBalance, postBet.betValue);\\r\\n            playerWinnings[_player] = SafeMath.add(\\r\\n                playerWinnings[_player],\\r\\n                winAmount\\r\\n            );\\r\\n        } else {\\r\\n            //loser\\r\\n            emit filpFinshed(0);\\r\\n            contractBalance = SafeMath.add(\\r\\n                contractBalance,\\r\\n                // SafeMath.sub(postBet.betValue, postBet.setRandomPrice)\\r\\n                SafeMath.sub(postBet.betValue, 0)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawUserWinnings() public {\\r\\n        require(playerWinnings[msg.sender] > 0, \\\"No funds to withdraw\\\");\\r\\n        uint toTransfer = playerWinnings[msg.sender];\\r\\n        playerWinnings[msg.sender] = 0;\\r\\n        payable(msg.sender).transfer(toTransfer);\\r\\n        emit userWithdrawal(msg.sender, toTransfer);\\r\\n    }\\r\\n\\r\\n    function getWinningsBalance() public view returns (uint) {\\r\\n        return playerWinnings[msg.sender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *@notice The following functions are reserved for the owner of the contract.\\r\\n     */\\r\\n\\r\\n    function fundContract() public payable onlyOwner {\\r\\n        contractBalance = SafeMath.add(contractBalance, msg.value);\\r\\n    }\\r\\n\\r\\n    function fundWinnings() public payable onlyOwner {\\r\\n        playerWinnings[msg.sender] = SafeMath.add(\\r\\n            playerWinnings[msg.sender],\\r\\n            msg.value\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawAll() public onlyOwner {\\r\\n        uint toTransfer = contractBalance;\\r\\n        contractBalance = 0;\\r\\n        payable(msg.sender).transfer(toTransfer);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5399b9441b27d07afaba5b2157376229b7ed2aed7787e7c1da4c000dbc3b5e79\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":163,"contract":"contracts/Coinflip.sol:Coinflip","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":285,"contract":"contracts/Coinflip.sol:Coinflip","label":"playerWinnings","offset":0,"slot":"1","type":"t_mapping(t_address,t_uint256)"},{"astId":290,"contract":"contracts/Coinflip.sol:Coinflip","label":"waiting","offset":0,"slot":"2","type":"t_mapping(t_address,t_struct(Bet)281_storage)"},{"astId":306,"contract":"contracts/Coinflip.sol:Coinflip","label":"lastHash","offset":0,"slot":"3","type":"t_uint256"},{"astId":309,"contract":"contracts/Coinflip.sol:Coinflip","label":"FACTOR","offset":0,"slot":"4","type":"t_uint256"},{"astId":311,"contract":"contracts/Coinflip.sol:Coinflip","label":"contractBalance","offset":0,"slot":"5","type":"t_uint256"},{"astId":314,"contract":"contracts/Coinflip.sol:Coinflip","label":"freeCallback","offset":0,"slot":"6","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_struct(Bet)281_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Coinflip.Bet)","numberOfBytes":"32","value":"t_struct(Bet)281_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(Bet)281_storage":{"encoding":"inplace","label":"struct Coinflip.Bet","members":[{"astId":276,"contract":"contracts/Coinflip.sol:Coinflip","label":"playerAddress","offset":0,"slot":"0","type":"t_address"},{"astId":278,"contract":"contracts/Coinflip.sol:Coinflip","label":"betValue","offset":0,"slot":"1","type":"t_uint256"},{"astId":280,"contract":"contracts/Coinflip.sol:Coinflip","label":"headsTails","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"flip(uint256)":{"notice":"This function simulates a coin flip which makes a call to the Provable oracle for        a random number."},"fundContract()":{"notice":"The following functions are reserved for the owner of the contract."}},"version":1}},"Context":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212203b98f1419033215b522c7ae11f75bc8d11b4455f44f8d9301b1463abb7b9ab9a64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE SWAP9 CALL COINBASE SWAP1 CALLER 0x21 JUMPDEST MSTORE 0x2C PUSH27 0xE11F75BC8D11B4455F44F8D9301B1463ABB7B9AB9A64736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"3754:506:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea26469706673582212203b98f1419033215b522c7ae11f75bc8d11b4455f44f8d9301b1463abb7b9ab9a64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE SWAP9 CALL COINBASE SWAP1 CALLER 0x21 JUMPDEST MSTORE 0x2C PUSH27 0xE11F75BC8D11B4455F44F8D9301B1463ABB7B9AB9A64736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"3754:506:0:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Coinflip.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Coinflip.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Coinflip is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Bet {\\r\\n        address playerAddress;\\r\\n        uint256 betValue;\\r\\n        uint256 headsTails;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) public playerWinnings;\\r\\n    mapping(address => Bet) public waiting;\\r\\n\\r\\n    event logNewProvableQuery(string description);\\r\\n    event userWithdrawal(address indexed caller, uint256 amount);\\r\\n    event filpFinshed(uint result);\\r\\n\\r\\n    uint256 lastHash;\\r\\n    uint256 FACTOR =\\r\\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\\r\\n\\r\\n    uint public contractBalance;\\r\\n\\r\\n    bool public freeCallback = true;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getResult() private returns (uint) {\\r\\n        uint256 blockValue = uint256(blockhash(block.number.sub(1)));\\r\\n\\r\\n        if (lastHash == blockValue) {\\r\\n            revert();\\r\\n        }\\r\\n\\r\\n        lastHash = blockValue;\\r\\n        uint256 coinFlip = blockValue % 2;\\r\\n        uint side = coinFlip == 1 ? 1 : 0;\\r\\n        return side;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *@notice This function simulates a coin flip which makes a call to the Provable oracle for\\r\\n     *        a random number.\\r\\n     *@dev The function first checks if this is the very first call to the Provable oracle in order\\r\\n     *     for the user to not pay for the first free call. This also adds user values to two different\\r\\n     *     mappings: 'waiting' and 'afterWaiting.' Both mappings are necessary in order to bridge the\\r\\n     *     user's address (which we has access to here with msg.sender) and the user's queryId sent from\\r\\n     *     Provable after the function call.\\r\\n     *\\r\\n     *@param oneZero - The numerical value of heads(0) or tails(1)\\r\\n     */\\r\\n\\r\\n    function flip(uint256 oneZero) public payable {\\r\\n        require(contractBalance > msg.value, \\\"We don't have enough funds\\\");\\r\\n\\r\\n        address _player = msg.sender;\\r\\n        Bet memory postBet;\\r\\n        postBet.playerAddress = msg.sender;\\r\\n        postBet.betValue = msg.value;\\r\\n        postBet.headsTails = oneZero;\\r\\n\\r\\n        uint flipResult = getResult();\\r\\n\\r\\n        if (flipResult == postBet.headsTails) {\\r\\n            //winner\\r\\n            emit filpFinshed(1);\\r\\n            uint winAmount = SafeMath.sub(SafeMath.mul(postBet.betValue, 2), 0);\\r\\n            contractBalance = SafeMath.sub(contractBalance, postBet.betValue);\\r\\n            playerWinnings[_player] = SafeMath.add(\\r\\n                playerWinnings[_player],\\r\\n                winAmount\\r\\n            );\\r\\n        } else {\\r\\n            //loser\\r\\n            emit filpFinshed(0);\\r\\n            contractBalance = SafeMath.add(\\r\\n                contractBalance,\\r\\n                // SafeMath.sub(postBet.betValue, postBet.setRandomPrice)\\r\\n                SafeMath.sub(postBet.betValue, 0)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawUserWinnings() public {\\r\\n        require(playerWinnings[msg.sender] > 0, \\\"No funds to withdraw\\\");\\r\\n        uint toTransfer = playerWinnings[msg.sender];\\r\\n        playerWinnings[msg.sender] = 0;\\r\\n        payable(msg.sender).transfer(toTransfer);\\r\\n        emit userWithdrawal(msg.sender, toTransfer);\\r\\n    }\\r\\n\\r\\n    function getWinningsBalance() public view returns (uint) {\\r\\n        return playerWinnings[msg.sender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *@notice The following functions are reserved for the owner of the contract.\\r\\n     */\\r\\n\\r\\n    function fundContract() public payable onlyOwner {\\r\\n        contractBalance = SafeMath.add(contractBalance, msg.value);\\r\\n    }\\r\\n\\r\\n    function fundWinnings() public payable onlyOwner {\\r\\n        playerWinnings[msg.sender] = SafeMath.add(\\r\\n            playerWinnings[msg.sender],\\r\\n            msg.value\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawAll() public onlyOwner {\\r\\n        uint toTransfer = contractBalance;\\r\\n        contractBalance = 0;\\r\\n        payable(msg.sender).transfer(toTransfer);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5399b9441b27d07afaba5b2157376229b7ed2aed7787e7c1da4c000dbc3b5e79\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"Ownable":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506102b5806100616000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610251565b61012b565b6000546001600160a01b031633146100e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146101855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100d8565b61018e81610191565b50565b6001600160a01b0381166101f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100d8565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600060208284031215610262578081fd5b81356001600160a01b0381168114610278578182fd5b939250505056fea2646970667358221220c5dafe8bc5a48de470df922be2c8c45d050007c82b80d2f38a6c49c140ff00b064736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 DUP3 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH2 0x2B5 DUP1 PUSH2 0x61 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x251 JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x185 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH2 0x18E DUP2 PUSH2 0x191 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x262 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x278 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0xDA INVALID DUP12 0xC5 LOG4 DUP14 0xE4 PUSH17 0xDF922BE2C8C45D050007C82B80D2F38A6C 0x49 0xC1 BLOCKHASH SELFDESTRUCT STOP 0xB0 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"4264:1092:0:-:0;;;4447:153;;;;;;;;;-1:-1:-1;4472:17:0;4515:18;;-1:-1:-1;;;;;;4515:18:0;4006:10;4515:18;;;;;4549:43;;4006:10;;;;4549:43;;4472:17;;4549:43;4447:153;4264:1092;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1298:1","statements":[{"nodeType":"YulBlock","src":"6:3:1","statements":[]},{"body":{"nodeType":"YulBlock","src":"84:236:1","statements":[{"body":{"nodeType":"YulBlock","src":"130:26:1","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"139:6:1"},{"name":"value0","nodeType":"YulIdentifier","src":"147:6:1"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"132:6:1"},"nodeType":"YulFunctionCall","src":"132:22:1"},"nodeType":"YulExpressionStatement","src":"132:22:1"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"105:7:1"},{"name":"headStart","nodeType":"YulIdentifier","src":"114:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"101:3:1"},"nodeType":"YulFunctionCall","src":"101:23:1"},{"kind":"number","nodeType":"YulLiteral","src":"126:2:1","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"97:3:1"},"nodeType":"YulFunctionCall","src":"97:32:1"},"nodeType":"YulIf","src":"94:2:1"},{"nodeType":"YulVariableDeclaration","src":"165:36:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"191:9:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"178:12:1"},"nodeType":"YulFunctionCall","src":"178:23:1"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"169:5:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"264:26:1","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"273:6:1"},{"name":"value0","nodeType":"YulIdentifier","src":"281:6:1"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"266:6:1"},"nodeType":"YulFunctionCall","src":"266:22:1"},"nodeType":"YulExpressionStatement","src":"266:22:1"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:1"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"234:5:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"249:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"254:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"245:3:1"},"nodeType":"YulFunctionCall","src":"245:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"258:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"241:3:1"},"nodeType":"YulFunctionCall","src":"241:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"230:3:1"},"nodeType":"YulFunctionCall","src":"230:31:1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"220:2:1"},"nodeType":"YulFunctionCall","src":"220:42:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"213:6:1"},"nodeType":"YulFunctionCall","src":"213:50:1"},"nodeType":"YulIf","src":"210:2:1"},{"nodeType":"YulAssignment","src":"299:15:1","value":{"name":"value","nodeType":"YulIdentifier","src":"309:5:1"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"299:6:1"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50:9:1","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"61:7:1","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"73:6:1","type":""}],"src":"14:306:1"},{"body":{"nodeType":"YulBlock","src":"426:102:1","statements":[{"nodeType":"YulAssignment","src":"436:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"448:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"459:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"444:3:1"},"nodeType":"YulFunctionCall","src":"444:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"436:4:1"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"478:9:1"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"493:6:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"509:3:1","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"514:1:1","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"505:3:1"},"nodeType":"YulFunctionCall","src":"505:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"518:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"501:3:1"},"nodeType":"YulFunctionCall","src":"501:19:1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"489:3:1"},"nodeType":"YulFunctionCall","src":"489:32:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"471:6:1"},"nodeType":"YulFunctionCall","src":"471:51:1"},"nodeType":"YulExpressionStatement","src":"471:51:1"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"395:9:1","type":""},{"name":"value0","nodeType":"YulTypedName","src":"406:6:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"417:4:1","type":""}],"src":"325:203:1"},{"body":{"nodeType":"YulBlock","src":"707:228:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"724:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"735:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"717:6:1"},"nodeType":"YulFunctionCall","src":"717:21:1"},"nodeType":"YulExpressionStatement","src":"717:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"758:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"769:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"754:3:1"},"nodeType":"YulFunctionCall","src":"754:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"774:2:1","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"747:6:1"},"nodeType":"YulFunctionCall","src":"747:30:1"},"nodeType":"YulExpressionStatement","src":"747:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"797:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"808:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"793:3:1"},"nodeType":"YulFunctionCall","src":"793:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"813:34:1","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"786:6:1"},"nodeType":"YulFunctionCall","src":"786:62:1"},"nodeType":"YulExpressionStatement","src":"786:62:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"868:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"879:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"864:3:1"},"nodeType":"YulFunctionCall","src":"864:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"884:8:1","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"857:6:1"},"nodeType":"YulFunctionCall","src":"857:36:1"},"nodeType":"YulExpressionStatement","src":"857:36:1"},{"nodeType":"YulAssignment","src":"902:27:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"914:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"925:3:1","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"910:3:1"},"nodeType":"YulFunctionCall","src":"910:19:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"902:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"684:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"698:4:1","type":""}],"src":"533:402:1"},{"body":{"nodeType":"YulBlock","src":"1114:182:1","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1131:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1142:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1124:6:1"},"nodeType":"YulFunctionCall","src":"1124:21:1"},"nodeType":"YulExpressionStatement","src":"1124:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1165:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1176:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1161:3:1"},"nodeType":"YulFunctionCall","src":"1161:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"1181:2:1","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1154:6:1"},"nodeType":"YulFunctionCall","src":"1154:30:1"},"nodeType":"YulExpressionStatement","src":"1154:30:1"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1204:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1215:2:1","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1200:3:1"},"nodeType":"YulFunctionCall","src":"1200:18:1"},{"kind":"string","nodeType":"YulLiteral","src":"1220:34:1","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1193:6:1"},"nodeType":"YulFunctionCall","src":"1193:62:1"},"nodeType":"YulExpressionStatement","src":"1193:62:1"},{"nodeType":"YulAssignment","src":"1264:26:1","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1276:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"1287:2:1","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1272:3:1"},"nodeType":"YulFunctionCall","src":"1272:18:1"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1264:4:1"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1091:9:1","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1105:4:1","type":""}],"src":"940:356:1"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}","id":1,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610251565b61012b565b6000546001600160a01b031633146100e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146101855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100d8565b61018e81610191565b50565b6001600160a01b0381166101f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100d8565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600060208284031215610262578081fd5b81356001600160a01b0381168114610278578182fd5b939250505056fea2646970667358221220c5dafe8bc5a48de470df922be2c8c45d050007c82b80d2f38a6c49c140ff00b064736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x251 JUMP JUMPDEST PUSH2 0x12B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x185 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH2 0x18E DUP2 PUSH2 0x191 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x262 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x278 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0xDA INVALID DUP12 0xC5 LOG4 DUP14 0xE4 PUSH17 0xDF922BE2C8C45D050007C82B80D2F38A6C 0x49 0xC1 BLOCKHASH SELFDESTRUCT STOP 0xB0 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"4264:1092:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4822:140;;;:::i;:::-;;4608:79;4646:7;4673:6;4608:79;;;-1:-1:-1;;;;;4673:6:0;;;471:51:1;;4608:79:0;;;;;459:2:1;4608:79:0;;;4970:109;;;;;;:::i;:::-;;:::i;4822:140::-;4735:6;;-1:-1:-1;;;;;4735:6:0;4006:10;4735:22;4727:67;;;;-1:-1:-1;;;4727:67:0;;1142:2:1;4727:67:0;;;1124:21:1;;;1161:18;;;1154:30;1220:34;1200:18;;;1193:62;1272:18;;4727:67:0;;;;;;;;;4921:1:::1;4905:6:::0;;4884:40:::1;::::0;-1:-1:-1;;;;;4905:6:0;;::::1;::::0;4884:40:::1;::::0;4921:1;;4884:40:::1;4952:1;4935:19:::0;;-1:-1:-1;;;;;;4935:19:0::1;::::0;;4822:140::o;4970:109::-;4735:6;;-1:-1:-1;;;;;4735:6:0;4006:10;4735:22;4727:67;;;;-1:-1:-1;;;4727:67:0;;1142:2:1;4727:67:0;;;1124:21:1;;;1161:18;;;1154:30;1220:34;1200:18;;;1193:62;1272:18;;4727:67:0;1114:182:1;4727:67:0;5043:28:::1;5062:8;5043:18;:28::i;:::-;4970:109:::0;:::o;5087:266::-;-1:-1:-1;;;;;5175:22:0;;5153:110;;;;-1:-1:-1;;;5153:110:0;;735:2:1;5153:110:0;;;717:21:1;774:2;754:18;;;747:30;813:34;793:18;;;786:62;-1:-1:-1;;;864:18:1;;;857:36;910:19;;5153:110:0;707:228:1;5153:110:0;5300:6;;;5279:38;;-1:-1:-1;;;;;5279:38:0;;;;5300:6;;;5279:38;;;5328:6;:17;;-1:-1:-1;;;;;;5328:17:0;-1:-1:-1;;;;;5328:17:0;;;;;;;;;;5087:266::o;14:306:1:-;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;178:23;;-1:-1:-1;;;;;230:31:1;;220:42;;210:2;;281:6;273;266:22;210:2;309:5;84:236;-1:-1:-1;;;84:236:1:o"},"gasEstimates":{"creation":{"codeDepositCost":"138600","executionCost":"22556","totalCost":"161156"},"external":{"owner()":"992","renounceOwnership()":"24143","transferOwnership(address)":"24416"},"internal":{"_transferOwnership(address)":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Coinflip.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Coinflip.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Coinflip is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Bet {\\r\\n        address playerAddress;\\r\\n        uint256 betValue;\\r\\n        uint256 headsTails;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) public playerWinnings;\\r\\n    mapping(address => Bet) public waiting;\\r\\n\\r\\n    event logNewProvableQuery(string description);\\r\\n    event userWithdrawal(address indexed caller, uint256 amount);\\r\\n    event filpFinshed(uint result);\\r\\n\\r\\n    uint256 lastHash;\\r\\n    uint256 FACTOR =\\r\\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\\r\\n\\r\\n    uint public contractBalance;\\r\\n\\r\\n    bool public freeCallback = true;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getResult() private returns (uint) {\\r\\n        uint256 blockValue = uint256(blockhash(block.number.sub(1)));\\r\\n\\r\\n        if (lastHash == blockValue) {\\r\\n            revert();\\r\\n        }\\r\\n\\r\\n        lastHash = blockValue;\\r\\n        uint256 coinFlip = blockValue % 2;\\r\\n        uint side = coinFlip == 1 ? 1 : 0;\\r\\n        return side;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *@notice This function simulates a coin flip which makes a call to the Provable oracle for\\r\\n     *        a random number.\\r\\n     *@dev The function first checks if this is the very first call to the Provable oracle in order\\r\\n     *     for the user to not pay for the first free call. This also adds user values to two different\\r\\n     *     mappings: 'waiting' and 'afterWaiting.' Both mappings are necessary in order to bridge the\\r\\n     *     user's address (which we has access to here with msg.sender) and the user's queryId sent from\\r\\n     *     Provable after the function call.\\r\\n     *\\r\\n     *@param oneZero - The numerical value of heads(0) or tails(1)\\r\\n     */\\r\\n\\r\\n    function flip(uint256 oneZero) public payable {\\r\\n        require(contractBalance > msg.value, \\\"We don't have enough funds\\\");\\r\\n\\r\\n        address _player = msg.sender;\\r\\n        Bet memory postBet;\\r\\n        postBet.playerAddress = msg.sender;\\r\\n        postBet.betValue = msg.value;\\r\\n        postBet.headsTails = oneZero;\\r\\n\\r\\n        uint flipResult = getResult();\\r\\n\\r\\n        if (flipResult == postBet.headsTails) {\\r\\n            //winner\\r\\n            emit filpFinshed(1);\\r\\n            uint winAmount = SafeMath.sub(SafeMath.mul(postBet.betValue, 2), 0);\\r\\n            contractBalance = SafeMath.sub(contractBalance, postBet.betValue);\\r\\n            playerWinnings[_player] = SafeMath.add(\\r\\n                playerWinnings[_player],\\r\\n                winAmount\\r\\n            );\\r\\n        } else {\\r\\n            //loser\\r\\n            emit filpFinshed(0);\\r\\n            contractBalance = SafeMath.add(\\r\\n                contractBalance,\\r\\n                // SafeMath.sub(postBet.betValue, postBet.setRandomPrice)\\r\\n                SafeMath.sub(postBet.betValue, 0)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawUserWinnings() public {\\r\\n        require(playerWinnings[msg.sender] > 0, \\\"No funds to withdraw\\\");\\r\\n        uint toTransfer = playerWinnings[msg.sender];\\r\\n        playerWinnings[msg.sender] = 0;\\r\\n        payable(msg.sender).transfer(toTransfer);\\r\\n        emit userWithdrawal(msg.sender, toTransfer);\\r\\n    }\\r\\n\\r\\n    function getWinningsBalance() public view returns (uint) {\\r\\n        return playerWinnings[msg.sender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *@notice The following functions are reserved for the owner of the contract.\\r\\n     */\\r\\n\\r\\n    function fundContract() public payable onlyOwner {\\r\\n        contractBalance = SafeMath.add(contractBalance, msg.value);\\r\\n    }\\r\\n\\r\\n    function fundWinnings() public payable onlyOwner {\\r\\n        playerWinnings[msg.sender] = SafeMath.add(\\r\\n            playerWinnings[msg.sender],\\r\\n            msg.value\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawAll() public onlyOwner {\\r\\n        uint toTransfer = contractBalance;\\r\\n        contractBalance = 0;\\r\\n        payable(msg.sender).transfer(toTransfer);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5399b9441b27d07afaba5b2157376229b7ed2aed7787e7c1da4c000dbc3b5e79\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":163,"contract":"contracts/Coinflip.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122061809ff62c556843137aff4dcb4cfb8426e833c733a373601cfa423b7bfbb34164736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x809F 0xF6 0x2C SSTORE PUSH9 0x43137AFF4DCB4CFB84 0x26 0xE8 CALLER 0xC7 CALLER LOG3 PUSH20 0x601CFA423B7BFBB34164736F6C63430008040033 ","sourceMap":"679:3029:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;679:3029:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122061809ff62c556843137aff4dcb4cfb8426e833c733a373601cfa423b7bfbb34164736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x809F 0xF6 0x2C SSTORE PUSH9 0x43137AFF4DCB4CFB84 0x26 0xE8 CALLER 0xC7 CALLER LOG3 PUSH20 0x601CFA423B7BFBB34164736F6C63430008040033 ","sourceMap":"679:3029:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","mod(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Coinflip.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Coinflip.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n/* --------- Access Control --------- */\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    function _msgSender() internal view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Coinflip is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Bet {\\r\\n        address playerAddress;\\r\\n        uint256 betValue;\\r\\n        uint256 headsTails;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) public playerWinnings;\\r\\n    mapping(address => Bet) public waiting;\\r\\n\\r\\n    event logNewProvableQuery(string description);\\r\\n    event userWithdrawal(address indexed caller, uint256 amount);\\r\\n    event filpFinshed(uint result);\\r\\n\\r\\n    uint256 lastHash;\\r\\n    uint256 FACTOR =\\r\\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\\r\\n\\r\\n    uint public contractBalance;\\r\\n\\r\\n    bool public freeCallback = true;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function getResult() private returns (uint) {\\r\\n        uint256 blockValue = uint256(blockhash(block.number.sub(1)));\\r\\n\\r\\n        if (lastHash == blockValue) {\\r\\n            revert();\\r\\n        }\\r\\n\\r\\n        lastHash = blockValue;\\r\\n        uint256 coinFlip = blockValue % 2;\\r\\n        uint side = coinFlip == 1 ? 1 : 0;\\r\\n        return side;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *@notice This function simulates a coin flip which makes a call to the Provable oracle for\\r\\n     *        a random number.\\r\\n     *@dev The function first checks if this is the very first call to the Provable oracle in order\\r\\n     *     for the user to not pay for the first free call. This also adds user values to two different\\r\\n     *     mappings: 'waiting' and 'afterWaiting.' Both mappings are necessary in order to bridge the\\r\\n     *     user's address (which we has access to here with msg.sender) and the user's queryId sent from\\r\\n     *     Provable after the function call.\\r\\n     *\\r\\n     *@param oneZero - The numerical value of heads(0) or tails(1)\\r\\n     */\\r\\n\\r\\n    function flip(uint256 oneZero) public payable {\\r\\n        require(contractBalance > msg.value, \\\"We don't have enough funds\\\");\\r\\n\\r\\n        address _player = msg.sender;\\r\\n        Bet memory postBet;\\r\\n        postBet.playerAddress = msg.sender;\\r\\n        postBet.betValue = msg.value;\\r\\n        postBet.headsTails = oneZero;\\r\\n\\r\\n        uint flipResult = getResult();\\r\\n\\r\\n        if (flipResult == postBet.headsTails) {\\r\\n            //winner\\r\\n            emit filpFinshed(1);\\r\\n            uint winAmount = SafeMath.sub(SafeMath.mul(postBet.betValue, 2), 0);\\r\\n            contractBalance = SafeMath.sub(contractBalance, postBet.betValue);\\r\\n            playerWinnings[_player] = SafeMath.add(\\r\\n                playerWinnings[_player],\\r\\n                winAmount\\r\\n            );\\r\\n        } else {\\r\\n            //loser\\r\\n            emit filpFinshed(0);\\r\\n            contractBalance = SafeMath.add(\\r\\n                contractBalance,\\r\\n                // SafeMath.sub(postBet.betValue, postBet.setRandomPrice)\\r\\n                SafeMath.sub(postBet.betValue, 0)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawUserWinnings() public {\\r\\n        require(playerWinnings[msg.sender] > 0, \\\"No funds to withdraw\\\");\\r\\n        uint toTransfer = playerWinnings[msg.sender];\\r\\n        playerWinnings[msg.sender] = 0;\\r\\n        payable(msg.sender).transfer(toTransfer);\\r\\n        emit userWithdrawal(msg.sender, toTransfer);\\r\\n    }\\r\\n\\r\\n    function getWinningsBalance() public view returns (uint) {\\r\\n        return playerWinnings[msg.sender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *@notice The following functions are reserved for the owner of the contract.\\r\\n     */\\r\\n\\r\\n    function fundContract() public payable onlyOwner {\\r\\n        contractBalance = SafeMath.add(contractBalance, msg.value);\\r\\n    }\\r\\n\\r\\n    function fundWinnings() public payable onlyOwner {\\r\\n        playerWinnings[msg.sender] = SafeMath.add(\\r\\n            playerWinnings[msg.sender],\\r\\n            msg.value\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawAll() public onlyOwner {\\r\\n        uint toTransfer = contractBalance;\\r\\n        contractBalance = 0;\\r\\n        payable(msg.sender).transfer(toTransfer);\\r\\n    }\\r\\n\\r\\n    function claimETH(uint256 amount) external onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5399b9441b27d07afaba5b2157376229b7ed2aed7787e7c1da4c000dbc3b5e79\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}